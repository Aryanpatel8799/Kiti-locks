# Nginx Configuration for Kiti Store SEO
# Place this in /etc/nginx/sites-available/kitistore.com

server {
    listen 80;
    server_name www.kitistore.com kitistore.com;
    return 301 https://www.kitistore.com$request_uri;
}

server {
    listen 443 ssl http2;
    server_name kitistore.com;
    return 301 https://www.kitistore.com$request_uri;
    
    # SSL configuration (add your SSL cert paths)
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
}

server {
    listen 443 ssl http2;
    server_name www.kitistore.com;
    
    # SSL configuration (add your SSL cert paths)
    # ssl_certificate /path/to/your/certificate.crt;
    # ssl_certificate_key /path/to/your/private.key;
    
    root /path/to/your/kiti-store/dist;
    index index.html;
    
    # Security headers for SEO
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Enable Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml application/rss+xml application/json image/svg+xml;
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        access_log off;
    }
    
    # Serve robots.txt and sitemap.xml directly
    location = /robots.txt {
        try_files $uri $uri/ =404;
        add_header Content-Type text/plain;
    }
    
    location = /sitemap.xml {
        try_files $uri $uri/ =404;
        add_header Content-Type application/xml;
    }
    
    # API routes
    location /api/ {
        proxy_pass http://localhost:8081;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # Special handling for search engine bots
    location / {
        # Check if user agent is a search engine bot
        if ($http_user_agent ~* "bot|crawler|spider|crawling|facebookexternalhit|twitterbot|whatsapp") {
            # Serve prerendered static HTML for bots
            try_files /prerendered$uri.html /prerendered$uri/index.html @fallback;
        }
        
        # For regular users, serve the SPA
        try_files $uri $uri/ /index.html;
    }
    
    # Fallback for bots when prerendered content isn't available
    location @fallback {
        try_files $uri $uri/ /index.html;
    }
    
    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ^/(\.env|\.git|node_modules|src) {
        deny all;
        return 404;
    }
}
