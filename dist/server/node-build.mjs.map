{"version":3,"file":"node-build.mjs","sources":["../../server/models/User.ts","../../server/config/passport.ts","../../server/config/database.ts","../../server/utils/jwt.ts","../../server/middleware/auth.ts","../../server/services/twoFactorService.ts","../../server/routes/auth.ts","../../server/models/Product.ts","../../server/models/Category.ts","../../server/routes/products.ts","../../server/routes/categories.ts","../../server/routes/cart.ts","../../server/routes/wishlist.ts","../../server/config/cloudinary.ts","../../server/routes/upload.ts","../../server/models/Order.ts","../../server/services/emailService.ts","../../server/routes/orders.ts","../../server/utils/shiprocketAuth.ts","../../server/routes/checkout.ts","../../server/models/Review.ts","../../server/routes/reviews.ts","../../server/routes/analytics.ts","../../server/models/ShiprocketOrder.ts","../../server/controllers/shiprocketController.ts","../../server/routes/shiprocketRoutes.ts","../../server/routes/search.ts","../../server/routes/addresses.ts","../../server/routes/settings.ts","../../server/routes/users.ts","../../server/routes/inventory.ts","../../server/index.ts","../../server/node-build.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\nimport bcrypt from \"bcryptjs\";\n\nexport interface ICartItem {\n  product: mongoose.Types.ObjectId;\n  quantity: number;\n  variant?: {\n    name: string;\n    value: string;\n  };\n  addedAt: Date;\n}\n\nexport interface IUser extends Document {\n  name: string;\n  email: string;\n  password?: string;\n  role: \"user\" | \"admin\";\n  wishlist: mongoose.Types.ObjectId[];\n  cart: ICartItem[];\n  addresses: IAddress[];\n  phone?: string;\n  avatar?: string;\n  bio?: string;\n  location?: string;\n  googleId?: string;\n  isVerified?: boolean;\n  preferences?: {\n    newsletter: boolean;\n    notifications: boolean;\n    marketing: boolean;\n  };\n  // 2FA fields\n  twoFactorSecret?: string;\n  twoFactorEnabled: boolean;\n  backupCodes?: string[];\n  lastLoginAt?: Date;\n  loginAttempts: number;\n  lockUntil?: Date;\n  passwordChangedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n  comparePassword(candidatePassword: string): Promise<boolean>;\n  isAccountLocked(): boolean;\n  incrementLoginAttempts(): Promise<void>;\n  resetLoginAttempts(): Promise<void>;\n}\n\nexport interface IAddress {\n  _id?: mongoose.Types.ObjectId;\n  type: \"billing\" | \"shipping\";\n  firstName: string;\n  lastName: string;\n  address1: string;\n  address2?: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  country: string;\n  isDefault: boolean;\n}\n\nconst addressSchema = new Schema<IAddress>({\n  type: { type: String, enum: [\"billing\", \"shipping\"], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  address1: { type: String, required: true },\n  address2: { type: String },\n  city: { type: String, required: true },\n  state: { type: String, required: true },\n  zipCode: { type: String, required: true },\n  country: { type: String, required: true, default: \"US\" },\n  isDefault: { type: Boolean, default: false },\n});\n\nconst cartItemSchema = new Schema<ICartItem>({\n  product: { type: Schema.Types.ObjectId, ref: \"Product\", required: true },\n  quantity: { type: Number, required: true, min: 1 },\n  variant: {\n    name: { type: String },\n    value: { type: String },\n  },\n  addedAt: { type: Date, default: Date.now },\n});\n\nconst userSchema = new Schema<IUser>(\n  {\n    name: { type: String, required: true, trim: true },\n    email: {\n      type: String,\n      required: true,\n      lowercase: true,\n      trim: true,\n    },\n    password: {\n      type: String,\n      minlength: 8, // Increased minimum length\n      validate: {\n        validator: function (v: string) {\n          // Strong password validation\n          return /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]/.test(\n            v,\n          );\n        },\n        message:\n          \"Password must contain at least one uppercase letter, one lowercase letter, one number and one special character\",\n      },\n    },\n    role: { type: String, enum: [\"user\", \"admin\"], default: \"user\" },\n    wishlist: [{ type: Schema.Types.ObjectId, ref: \"Product\" }],\n    cart: [cartItemSchema],\n    addresses: [addressSchema],\n    phone: { type: String, trim: true },\n    avatar: { type: String },\n    bio: { type: String, trim: true, maxlength: 500 },\n    location: { type: String, trim: true },\n    googleId: { type: String, unique: true, sparse: true },\n    isVerified: { type: Boolean, default: false },\n    preferences: {\n      newsletter: { type: Boolean, default: true },\n      notifications: { type: Boolean, default: true },\n      marketing: { type: Boolean, default: false },\n    },\n    // 2FA and security fields\n    twoFactorSecret: { type: String },\n    twoFactorEnabled: { type: Boolean, default: false },\n    backupCodes: [{ type: String }],\n    lastLoginAt: { type: Date },\n    loginAttempts: { type: Number, default: 0 },\n    lockUntil: { type: Date },\n    passwordChangedAt: { type: Date, default: Date.now },\n  },\n  {\n    timestamps: true,\n  },\n);\n\nuserSchema.pre(\"save\", async function (next) {\n  if (!this.isModified(\"password\") || !this.password) return next();\n\n  try {\n    const salt = await bcrypt.genSalt(12);\n    this.password = await bcrypt.hash(this.password, salt);\n    next();\n  } catch (error: any) {\n    next(error);\n  }\n});\n\nuserSchema.methods.comparePassword = async function (\n  candidatePassword: string,\n): Promise<boolean> {\n  if (!this.password) return false;\n  return bcrypt.compare(candidatePassword, this.password);\n};\n\n// Account locking methods\nuserSchema.methods.isAccountLocked = function (): boolean {\n  return !!(this.lockUntil && this.lockUntil > Date.now());\n};\n\nuserSchema.methods.incrementLoginAttempts = async function (): Promise<void> {\n  const maxAttempts = 5;\n  const lockTime = 2 * 60 * 60 * 1000; // 2 hours\n\n  // If this is the first attempt and account is locked, start over\n  if (this.lockUntil && this.lockUntil < Date.now()) {\n    return this.updateOne({\n      $unset: { lockUntil: 1 },\n      $set: { loginAttempts: 1 },\n    });\n  }\n\n  const updates: any = { $inc: { loginAttempts: 1 } };\n\n  // Lock account after max attempts\n  if (this.loginAttempts + 1 >= maxAttempts && !this.isAccountLocked()) {\n    updates.$set = { lockUntil: Date.now() + lockTime };\n  }\n\n  return this.updateOne(updates);\n};\n\nuserSchema.methods.resetLoginAttempts = async function (): Promise<void> {\n  return this.updateOne({\n    $unset: { loginAttempts: 1, lockUntil: 1 },\n    $set: { lastLoginAt: new Date() },\n  });\n};\n\nuserSchema.index({ email: 1 });\n\n// Fix for Mongoose/TypeScript linter errors in routes\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst UserModel: any = mongoose.models.User || mongoose.model<IUser>(\"User\", userSchema);\nexport default UserModel;\n","import passport from \"passport\";\nimport { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport { Strategy as JwtStrategy, ExtractJwt } from \"passport-jwt\";\nimport User from \"../models/User\";\nimport { generateTokens } from \"../utils/jwt\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst GOOGLE_CLIENT_ID = process.env.GOOGLE_CLIENT_ID;\nconst GOOGLE_CLIENT_SECRET = process.env.GOOGLE_CLIENT_SECRET;\nconst CLIENT_URL = process.env.CLIENT_URL || \"http://localhost:8080\";\n\n// Google OAuth Strategy\nif (GOOGLE_CLIENT_ID && GOOGLE_CLIENT_SECRET) {\n  passport.use(\n    new GoogleStrategy(\n      {\n        clientID: GOOGLE_CLIENT_ID,\n        clientSecret: GOOGLE_CLIENT_SECRET,\n        callbackURL: \"/api/auth/google/callback\",\n      },\n      async (accessToken, refreshToken, profile, done) => {\n        try {\n          // Check if user already exists\n          let user = await User.findOne({ email: profile.emails?.[0]?.value });\n\n          if (user) {\n            // User exists, return user\n            return done(null, user);\n          }\n\n          // Create new user\n          user = new User({\n            name: profile.displayName,\n            email: profile.emails?.[0]?.value,\n            password: \"google-oauth-user\", // Placeholder password for Google users\n            avatar: profile.photos?.[0]?.value,\n            role: \"user\",\n          });\n\n          await user.save();\n          return done(null, user);\n        } catch (error) {\n          return done(error, null);\n        }\n      },\n    ),\n  );\n}\n\n// JWT Strategy for API authentication\npassport.use(\n  new JwtStrategy(\n    {\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: JWT_SECRET,\n    },\n    async (payload, done) => {\n      try {\n        const user = await User.findById(payload.userId).select(\"-password\");\n        if (user) {\n          return done(null, user);\n        }\n        return done(null, false);\n      } catch (error) {\n        return done(error, false);\n      }\n    },\n  ),\n);\n\n// Serialize user for sessions\npassport.serializeUser((user: any, done) => {\n  done(null, user._id);\n});\n\n// Deserialize user from sessions\npassport.deserializeUser(async (id: string, done) => {\n  try {\n    const user = await User.findById(id).select(\"-password\");\n    done(null, user);\n  } catch (error) {\n    done(error, null);\n  }\n});\n\nexport default passport;\n","import mongoose from \"mongoose\";\nimport dotenv from \"dotenv\";\n\n// Load environment variables\ndotenv.config();\n\nlet isConnected = false;\n\nconst connectDB = async (): Promise<boolean> => {\n  try {\n    const mongoURI =\n      process.env.MONGO_URI || \"mongodb://localhost:27017/ecommerce\";\n\n    // Set connection timeout and other options\n    await mongoose.connect(mongoURI, {\n      serverSelectionTimeoutMS: 5000, // Timeout after 5s instead of 30s\n      connectTimeoutMS: 10000,\n    });\n\n    isConnected = true;\n    console.log(\"✅ MongoDB connected successfully\");\n    return true;\n  } catch (error) {\n    console.warn(\"⚠️  MongoDB connection failed:\", error.message);\n    console.log(\n      \"⚠️  Database connection required. For full functionality, please:\",\n    );\n    console.log(\"   1. Install MongoDB locally, or\");\n    console.log(\"   2. Set MONGO_URI to a MongoDB Atlas connection string\");\n    console.log(\"   3. Restart the application after fixing\");\n    isConnected = false;\n    return false;\n  }\n};\n\nexport const getConnectionStatus = () => isConnected;\n\nexport default connectDB;\n","import jwt from \"jsonwebtoken\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\nconst JWT_REFRESH_SECRET =\n  process.env.JWT_REFRESH_SECRET || \"your-refresh-secret\";\n\nexport interface TokenPayload {\n  userId: string;\n  email: string;\n  role: string;\n}\n\nexport const generateAccessToken = (payload: TokenPayload): string => {\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: \"15m\" });\n};\n\nexport const generateRefreshToken = (payload: TokenPayload): string => {\n  return jwt.sign(payload, JWT_REFRESH_SECRET, { expiresIn: \"7d\" });\n};\n\nexport const verifyAccessToken = (token: string): TokenPayload => {\n  return jwt.verify(token, JWT_SECRET) as TokenPayload;\n};\n\nexport const verifyRefreshToken = (token: string): TokenPayload => {\n  return jwt.verify(token, JWT_REFRESH_SECRET) as TokenPayload;\n};\n\nexport const generateTokens = (payload: TokenPayload) => {\n  const accessToken = generateAccessToken(payload);\n  const refreshToken = generateRefreshToken(payload);\n\n  return {\n    accessToken,\n    refreshToken,\n  };\n};\n","import { Request, Response, NextFunction } from \"express\";\nimport { verifyAccessToken, TokenPayload } from \"../utils/jwt\";\nimport User from \"../models/User\";\n\nexport interface AuthRequest extends Request {\n  user?: {\n    userId: string;\n    id: string; // Backward compatibility\n    email: string;\n    role: string;\n  };\n}\n\nexport const authenticateToken = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> => {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(\" \")[1];\n\n    if (!token) {\n      res.status(401).json({ error: \"Access token required\" });\n      return;\n    }\n\n    const decoded = verifyAccessToken(token);\n\n    const user = await User.findById(decoded.userId).select(\"-password\");\n    if (!user) {\n      res.status(401).json({ error: \"User not found\" });\n      return;\n    }\n\n    // Cast request to AuthRequest and assign user data\n    (req as AuthRequest).user = {\n      userId: decoded.userId,\n      id: decoded.userId, // Backward compatibility\n      email: decoded.email,\n      role: decoded.role,\n    };\n\n    next();\n  } catch (error) {\n    res.status(403).json({ error: \"Invalid or expired token\" });\n  }\n};\n\nexport const requireAdmin = (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): void => {\n  const authReq = req as AuthRequest;\n  if (!authReq.user) {\n    res.status(401).json({ error: \"Authentication required\" });\n    return;\n  }\n\n  if (authReq.user.role !== \"admin\") {\n    res.status(403).json({ error: \"Admin access required\" });\n    return;\n  }\n\n  next();\n};\n\nexport const optionalAuth = async (\n  req: Request,\n  res: Response,\n  next: NextFunction,\n): Promise<void> => {\n  try {\n    const authHeader = req.headers.authorization;\n    const token = authHeader && authHeader.split(\" \")[1];\n\n    if (token) {\n      const decoded = verifyAccessToken(token);\n      const user = await User.findById(decoded.userId).select(\"-password\");\n\n      if (user) {\n        (req as AuthRequest).user = {\n          userId: decoded.userId,\n          id: decoded.userId, // Backward compatibility\n          email: decoded.email,\n          role: decoded.role,\n        };\n      }\n    }\n\n    next();\n  } catch (error) {\n    next();\n  }\n};\n","import speakeasy from \"speakeasy\";\nimport QRCode from \"qrcode\";\nimport crypto from \"crypto\";\n\nexport class TwoFactorService {\n  // Generate a new secret for 2FA\n  static generateSecret(userEmail: string): {\n    secret: string;\n    qrCodeUrl: string;\n    backupCodes: string[];\n  } {\n    const secret = speakeasy.generateSecret({\n      name: `Kiti Locks (${userEmail})`,\n      issuer: \"Kiti Locks Admin\",\n      length: 32,\n    });\n\n    // Generate backup codes\n    const backupCodes = this.generateBackupCodes();\n\n    return {\n      secret: secret.base32,\n      qrCodeUrl: secret.otpauth_url || \"\",\n      backupCodes,\n    };\n  }\n\n  // Generate backup codes for 2FA\n  static generateBackupCodes(): string[] {\n    const codes: string[] = [];\n    for (let i = 0; i < 10; i++) {\n      codes.push(crypto.randomBytes(4).toString(\"hex\").toUpperCase());\n    }\n    return codes;\n  }\n\n  // Generate QR code data URL\n  static async generateQRCode(otpauthUrl: string): Promise<string> {\n    try {\n      return await QRCode.toDataURL(otpauthUrl);\n    } catch (error) {\n      throw new Error(\"Failed to generate QR code\");\n    }\n  }\n\n  // Verify a token against a secret\n  static verifyToken(token: string, secret: string): boolean {\n    return speakeasy.totp.verify({\n      secret,\n      encoding: \"base32\",\n      token,\n      window: 2, // Allow 2 steps of time skew\n    });\n  }\n\n  // Verify backup code\n  static verifyBackupCode(\n    code: string,\n    backupCodes: string[],\n  ): { valid: boolean; remainingCodes: string[] } {\n    const normalizedCode = code.toUpperCase().replace(/\\s/g, \"\");\n    const codeIndex = backupCodes.indexOf(normalizedCode);\n\n    if (codeIndex === -1) {\n      return { valid: false, remainingCodes: backupCodes };\n    }\n\n    // Remove the used backup code\n    const remainingCodes = backupCodes.filter(\n      (_, index) => index !== codeIndex,\n    );\n\n    return { valid: true, remainingCodes };\n  }\n\n  // Hash backup codes for secure storage\n  static hashBackupCodes(codes: string[]): string[] {\n    return codes.map((code) => {\n      return crypto.createHash(\"sha256\").update(code).digest(\"hex\");\n    });\n  }\n\n  // Verify hashed backup code\n  static verifyHashedBackupCode(\n    code: string,\n    hashedCodes: string[],\n  ): { valid: boolean; remainingCodes: string[] } {\n    const hashedCode = crypto\n      .createHash(\"sha256\")\n      .update(code.toUpperCase().replace(/\\s/g, \"\"))\n      .digest(\"hex\");\n    const codeIndex = hashedCodes.indexOf(hashedCode);\n\n    if (codeIndex === -1) {\n      return { valid: false, remainingCodes: hashedCodes };\n    }\n\n    // Remove the used backup code\n    const remainingCodes = hashedCodes.filter(\n      (_, index) => index !== codeIndex,\n    );\n\n    return { valid: true, remainingCodes };\n  }\n\n  // Rate limiting for 2FA attempts\n  private static attemptCounts = new Map<\n    string,\n    { count: number; resetTime: number }\n  >();\n\n  static checkRateLimit(identifier: string): {\n    allowed: boolean;\n    remainingAttempts: number;\n  } {\n    const maxAttempts = 5;\n    const windowMs = 15 * 60 * 1000; // 15 minutes\n    const now = Date.now();\n\n    const attempts = this.attemptCounts.get(identifier);\n\n    if (!attempts || now > attempts.resetTime) {\n      this.attemptCounts.set(identifier, {\n        count: 1,\n        resetTime: now + windowMs,\n      });\n      return { allowed: true, remainingAttempts: maxAttempts - 1 };\n    }\n\n    if (attempts.count >= maxAttempts) {\n      return { allowed: false, remainingAttempts: 0 };\n    }\n\n    attempts.count++;\n    return { allowed: true, remainingAttempts: maxAttempts - attempts.count };\n  }\n\n  static resetRateLimit(identifier: string): void {\n    this.attemptCounts.delete(identifier);\n  }\n}\n\nexport default TwoFactorService;\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport passport from \"passport\";\nimport User from \"../models/User\";\nimport { generateTokens, verifyRefreshToken } from \"../utils/jwt\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\nimport TwoFactorService from \"../services/twoFactorService\";\n\nconst router = Router();\n\nconst registerSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email format\"),\n  password: z\n    .string()\n    .min(6, \"Password must be at least 6 characters\")\n    .optional(),\n  googleId: z.string().optional(),\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Invalid email format\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nconst refreshSchema = z.object({\n  refreshToken: z.string().min(1, \"Refresh token is required\"),\n});\n\nrouter.post(\"/register\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { name, email, password } = req.body;\n\n    // Validate required fields for normal registration\n    if (!name || !email || !password) {\n      res.status(400).json({ error: \"Name, email, and password are required\" });\n      return;\n    }\n\n    if (password.length < 6) {\n      res.status(400).json({ error: \"Password must be at least 6 characters\" });\n      return;\n    }\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      res.status(400).json({ error: \"Email already registered\" });\n      return;\n    }\n\n    const user = new User({\n      name,\n      email,\n      password,\n    });\n\n    await user.save();\n\n    const { accessToken, refreshToken } = generateTokens({\n      userId: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    });\n\n    res.status(201).json({\n      message: \"Registration successful\",\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n      },\n      tokens: {\n        accessToken,\n        refreshToken,\n      },\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Registration error:\", error);\n    res.status(500).json({ error: \"Registration failed\" });\n  }\n});\n\nrouter.post(\"/login\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    console.log(\"Login attempt for email:\", req.body.email);\n    const { email, password, twoFactorToken } = req.body;\n\n    // Validate input\n    if (!email || !password) {\n      res.status(400).json({ error: \"Email and password are required\" });\n      return;\n    }\n\n    const user = await User.findOne({ email });\n    if (!user) {\n      res.status(401).json({ error: \"Invalid credentials\" });\n      return;\n    }\n\n    // Check if account is locked\n    if (user.isAccountLocked()) {\n      res\n        .status(423)\n        .json({\n          error:\n            \"Account is temporarily locked due to too many failed attempts\",\n        });\n      return;\n    }\n\n    const isValidPassword = await user.comparePassword(password);\n    if (!isValidPassword) {\n      await user.incrementLoginAttempts();\n      res.status(401).json({ error: \"Invalid credentials\" });\n      return;\n    }\n\n    // Check 2FA for admin users\n    if (user.role === \"admin\" && user.twoFactorEnabled) {\n      if (!twoFactorToken) {\n        res.status(200).json({\n          requiresTwoFactor: true,\n          message: \"Two-factor authentication required\",\n        });\n        return;\n      }\n\n      // Rate limit 2FA attempts\n      const rateLimit = TwoFactorService.checkRateLimit(`2fa_${user._id}`);\n      if (!rateLimit.allowed) {\n        res\n          .status(429)\n          .json({ error: \"Too many 2FA attempts. Please try again later.\" });\n        return;\n      }\n\n      // Verify 2FA token\n      const isValidToken = TwoFactorService.verifyToken(\n        twoFactorToken,\n        user.twoFactorSecret!,\n      );\n\n      if (!isValidToken) {\n        // Check if it's a backup code\n        if (user.backupCodes && user.backupCodes.length > 0) {\n          const backupResult = TwoFactorService.verifyHashedBackupCode(\n            twoFactorToken,\n            user.backupCodes,\n          );\n\n          if (backupResult.valid) {\n            // Update remaining backup codes\n            user.backupCodes = backupResult.remainingCodes;\n            await user.save();\n          } else {\n            res\n              .status(401)\n              .json({ error: \"Invalid two-factor authentication code\" });\n            return;\n          }\n        } else {\n          res\n            .status(401)\n            .json({ error: \"Invalid two-factor authentication code\" });\n          return;\n        }\n      }\n\n      // Reset 2FA rate limit on successful verification\n      TwoFactorService.resetRateLimit(`2fa_${user._id}`);\n    }\n\n    // Reset login attempts on successful login\n    await user.resetLoginAttempts();\n\n    const { accessToken, refreshToken } = generateTokens({\n      userId: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    });\n\n    res.json({\n      message: \"Login successful\",\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        twoFactorEnabled: user.twoFactorEnabled,\n      },\n      tokens: {\n        accessToken,\n        refreshToken,\n      },\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Login error:\", error);\n    res.status(500).json({ error: \"Login failed\" });\n  }\n});\n\nrouter.post(\"/refresh\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { refreshToken } = refreshSchema.parse(req.body);\n\n    const decoded = verifyRefreshToken(refreshToken);\n\n    const user = await User.findById(decoded.userId);\n    if (!user) {\n      res.status(401).json({ error: \"User not found\" });\n      return;\n    }\n\n    const { accessToken, refreshToken: newRefreshToken } = generateTokens({\n      userId: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    });\n\n    res.json({\n      tokens: {\n        accessToken,\n        refreshToken: newRefreshToken,\n      },\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    res.status(401).json({ error: \"Invalid refresh token\" });\n  }\n});\n\nrouter.get(\n  \"/me\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId)\n        .select(\"-password\")\n        .populate(\"wishlist\");\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      res.json({\n        user: {\n          id: user._id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n          wishlist: user.wishlist,\n          addresses: user.addresses,\n          phone: user.phone,\n          avatar: user.avatar,\n          createdAt: user.createdAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Get user error:\", error);\n      res.status(500).json({ error: \"Failed to get user data\" });\n    }\n  },\n);\n\nrouter.put(\n  \"/profile\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const updateData = req.body;\n      delete updateData.password;\n      delete updateData.email;\n      delete updateData.role;\n\n      const user = await User.findByIdAndUpdate(authReq.user?.userId, updateData, {\n        new: true,\n        runValidators: true,\n      }).select(\"-password\");\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Profile updated successfully\",\n        user,\n      });\n    } catch (error) {\n      console.error(\"Update profile error:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  },\n);\n\n// Google OAuth routes\nrouter.get(\n  \"/google\",\n  passport.authenticate(\"google\", { scope: [\"profile\", \"email\"] }),\n);\n\nrouter.post(\"/google\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    console.log(\"Google OAuth login attempt\");\n    const { credential } = req.body;\n\n    if (!credential) {\n      res.status(400).json({ error: \"Google credential is required\" });\n      return;\n    }\n\n    // Verify the Google credential token\n    const response = await fetch(\n      `https://oauth2.googleapis.com/tokeninfo?id_token=${credential}`,\n    );\n\n    if (!response.ok) {\n      res.status(401).json({ error: \"Invalid Google credential\" });\n      return;\n    }\n\n    const googleUser = await response.json() as {\n      email: string;\n      name: string;\n      picture: string;\n      sub: string;\n    };\n\n    // Check if user exists\n    let user = await User.findOne({ email: googleUser.email });\n\n    if (!user) {\n      // Create new user\n      user = new User({\n        name: googleUser.name,\n        email: googleUser.email,\n        avatar: googleUser.picture,\n        googleId: googleUser.sub,\n        isVerified: true,\n      });\n      await user.save();\n    }\n\n    // Generate JWT tokens\n    const { accessToken, refreshToken } = generateTokens({\n      userId: user._id.toString(),\n      email: user.email,\n      role: user.role,\n    });\n\n    res.json({\n      message: \"Google login successful\",\n      user: {\n        id: user._id,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        avatar: user.avatar,\n      },\n      tokens: {\n        accessToken,\n        refreshToken,\n      },\n    });\n  } catch (error) {\n    console.error(\"Google OAuth error:\", error);\n    res.status(500).json({ error: \"Google authentication failed\" });\n  }\n});\n\nrouter.get(\n  \"/google/callback\",\n  passport.authenticate(\"google\", { session: false }),\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const user = req.user as any;\n\n      if (!user) {\n        res.redirect(`${process.env.CLIENT_URL}/login?error=auth_failed`);\n        return;\n      }\n\n      // Generate JWT tokens\n      const { accessToken, refreshToken } = generateTokens({\n        userId: user._id.toString(),\n        email: user.email,\n        role: user.role,\n      });\n\n      // Redirect to frontend with tokens\n      res.redirect(\n        `${process.env.CLIENT_URL}/auth/callback?token=${accessToken}&refresh=${refreshToken}`,\n      );\n    } catch (error) {\n      console.error(\"Google OAuth callback error:\", error);\n      res.redirect(`${process.env.CLIENT_URL}/login?error=server_error`);\n    }\n  },\n);\n\n// Get user profile\nrouter.get(\n  \"/profile\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const userId = authReq.user!.userId;\n\n      if (!getConnectionStatus()) {\n        res.json({\n          profile: {\n            name: authReq.user!.email, // Use email as fallback for name\n            email: authReq.user!.email,\n            phone: \"\",\n            bio: \"\",\n            preferences: {\n              newsletter: true,\n              notifications: true,\n              marketing: false,\n            },\n          },\n        });\n        return;\n      }\n\n      const user = await User.findById(userId).select(\"-password -__v\");\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      res.json({\n        profile: {\n          name: user.name,\n          email: user.email,\n          phone: user.phone || \"\",\n          bio: user.bio || \"\",\n          avatar: user.avatar || \"\",\n          preferences: user.preferences || {\n            newsletter: true,\n            notifications: true,\n            marketing: false,\n          },\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching profile:\", error);\n      res.status(500).json({ error: \"Failed to fetch profile\" });\n    }\n  },\n);\n\n// Get current user info\nrouter.get(\n  \"/me\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const user = authReq.user!;\n      \n      // Get full user data from database\n      const fullUser = await User.findById(user.userId).select(\"-password\");\n      \n      res.json({\n        user: {\n          id: user.userId,\n          name: fullUser?.name || user.email,\n          email: user.email,\n          role: user.role,\n          avatar: fullUser?.avatar,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching user info:\", error);\n      res.status(500).json({ error: \"Failed to fetch user info\" });\n    }\n  },\n);\n\n// Update user profile\nrouter.put(\n  \"/profile\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const userId = authReq.user!.userId;\n      const { name, phone, bio, preferences } = req.body;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const user = await User.findByIdAndUpdate(\n        userId,\n        {\n          ...(name && { name }),\n          ...(phone && { phone }),\n          ...(bio && { bio }),\n          ...(preferences && { preferences }),\n        },\n        { new: true },\n      ).select(\"-password -__v\");\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Profile updated successfully\",\n        profile: {\n          name: user.name,\n          email: user.email,\n          phone: user.phone || \"\",\n          bio: user.bio || \"\",\n          preferences: user.preferences,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error updating profile:\", error);\n      res.status(500).json({ error: \"Failed to update profile\" });\n    }\n  },\n);\n\n// 2FA setup routes for admin users\nrouter.post(\n  \"/2fa/setup\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n      if (!user || user.role !== \"admin\") {\n        res.status(403).json({ error: \"Access denied\" });\n        return;\n      }\n\n      if (user.twoFactorEnabled) {\n        res\n          .status(400)\n          .json({ error: \"Two-factor authentication is already enabled\" });\n        return;\n      }\n\n      const { secret, qrCodeUrl, backupCodes } =\n        TwoFactorService.generateSecret(user.email);\n      const qrCodeDataUrl = await TwoFactorService.generateQRCode(qrCodeUrl);\n\n      // Store the secret temporarily (not enabled yet)\n      user.twoFactorSecret = secret;\n      await user.save();\n\n      res.json({\n        qrCode: qrCodeDataUrl,\n        secret,\n        backupCodes,\n      });\n    } catch (error) {\n      console.error(\"2FA setup error:\", error);\n      res\n        .status(500)\n        .json({ error: \"Failed to setup two-factor authentication\" });\n    }\n  },\n);\n\nrouter.post(\n  \"/2fa/verify\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { token } = req.body;\n\n      if (!token) {\n        res.status(400).json({ error: \"Token is required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n      if (!user || user.role !== \"admin\") {\n        res.status(403).json({ error: \"Access denied\" });\n        return;\n      }\n\n      if (!user.twoFactorSecret) {\n        res\n          .status(400)\n          .json({ error: \"Two-factor authentication setup not initiated\" });\n        return;\n      }\n\n      const isValidToken = TwoFactorService.verifyToken(\n        token,\n        user.twoFactorSecret,\n      );\n\n      if (!isValidToken) {\n        res.status(401).json({ error: \"Invalid token\" });\n        return;\n      }\n\n      // Enable 2FA and generate backup codes\n      const backupCodes = TwoFactorService.generateBackupCodes();\n      user.twoFactorEnabled = true;\n      user.backupCodes = TwoFactorService.hashBackupCodes(backupCodes);\n      await user.save();\n\n      res.json({\n        message: \"Two-factor authentication enabled successfully\",\n        backupCodes,\n      });\n    } catch (error) {\n      console.error(\"2FA verification error:\", error);\n      res\n        .status(500)\n        .json({ error: \"Failed to verify two-factor authentication\" });\n    }\n  },\n);\n\nrouter.post(\n  \"/2fa/disable\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { password, token } = req.body;\n\n      if (!password || !token) {\n        res.status(400).json({ error: \"Password and token are required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n      if (!user || user.role !== \"admin\") {\n        res.status(403).json({ error: \"Access denied\" });\n        return;\n      }\n\n      // Verify password\n      const isValidPassword = await user.comparePassword(password);\n      if (!isValidPassword) {\n        res.status(401).json({ error: \"Invalid password\" });\n        return;\n      }\n\n      // Verify 2FA token\n      if (!user.twoFactorSecret) {\n        res\n          .status(400)\n          .json({ error: \"Two-factor authentication is not enabled\" });\n        return;\n      }\n\n      const isValidToken = TwoFactorService.verifyToken(\n        token,\n        user.twoFactorSecret,\n      );\n      if (!isValidToken) {\n        res.status(401).json({ error: \"Invalid token\" });\n        return;\n      }\n\n      // Disable 2FA\n      user.twoFactorEnabled = false;\n      user.twoFactorSecret = undefined;\n      user.backupCodes = undefined;\n      await user.save();\n\n      res.json({\n        message: \"Two-factor authentication disabled successfully\",\n      });\n    } catch (error) {\n      console.error(\"2FA disable error:\", error);\n      res\n        .status(500)\n        .json({ error: \"Failed to disable two-factor authentication\" });\n    }\n  },\n);\n\n// Get total user count (admin only)\nrouter.get(\"/users/count\", authenticateToken, async (req, res) => {\n  try {\n    const count = await User.countDocuments();\n    res.json({ count });\n  } catch (error) {\n    res.status(500).json({ error: \"Failed to fetch user count\" });\n  }\n});\n\n// Change password\nrouter.put(\n  \"/change-password\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const { currentPassword, newPassword } = req.body;\n\n      if (!currentPassword || !newPassword) {\n        res.status(400).json({ error: \"Current password and new password are required\" });\n        return;\n      }\n\n      if (newPassword.length < 6) {\n        res.status(400).json({ error: \"New password must be at least 6 characters\" });\n        return;\n      }\n\n      const user = await User.findById(authReq.user?.userId);\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      // Verify current password\n      const isCurrentPasswordValid = await user.comparePassword(currentPassword);\n      if (!isCurrentPasswordValid) {\n        res.status(400).json({ error: \"Current password is incorrect\" });\n        return;\n      }\n\n      // Update password\n      user.password = newPassword;\n      await user.save();\n\n      res.json({\n        message: \"Password updated successfully\",\n      });\n    } catch (error) {\n      console.error(\"Error changing password:\", error);\n      res.status(500).json({ error: \"Failed to change password\" });\n    }\n  },\n);\n\nexport default router;\n","import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IProductVariant {\n  name: string;\n  value: string;\n  price?: number;\n  stock?: number;\n  sku?: string;\n}\n\nexport interface IProduct extends Document {\n  name: string;\n  slug: string;\n  description: string;\n  price: number;\n  comparePrice?: number;\n  category: mongoose.Types.ObjectId;\n  tags: string[];\n  variants: IProductVariant[];\n  images: string[];\n  stock: number;\n  status: \"active\" | \"draft\" | \"archived\";\n  featured: boolean;\n  averageRating: number;\n  reviewCount: number;\n  ratingDistribution: {\n    1: number;\n    2: number;\n    3: number;\n    4: number;\n    5: number;\n  };\n  weight?: number;\n  dimensions?: {\n    length: number;\n    width: number;\n    height: number;\n  };\n  seo: {\n    title?: string;\n    description?: string;\n  };\n  // New Kiti Locks specific fields\n  operationType?: \"Soft Close\" | \"Non-Soft Close\";\n  productCode?: string;\n  usageArea?: \"Kitchen\" | \"Wardrobe\" | \"Drawer\" | \"Overhead\";\n  finish?: \"Chrome\" | \"SS\" | \"Matte\" | \"Premium\" | \"Aluminium\" | \"PVC\";\n  trackType?: \"2 Track\" | \"3 Track\" | \"Premium\";\n  size?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst variantSchema = new Schema<IProductVariant>({\n  name: { type: String, required: true },\n  value: { type: String, required: true },\n  price: { type: Number },\n  stock: { type: Number },\n  sku: { type: String },\n});\n\nconst productSchema = new Schema<IProduct>(\n  {\n    name: { type: String, required: true, trim: true },\n    slug: {\n      type: String,\n      required: true,\n      lowercase: true,\n      trim: true,\n    },\n    description: { type: String, required: true },\n    price: { type: Number, required: true, min: 0 },\n    comparePrice: { type: Number, min: 0 },\n    category: {\n      type: Schema.Types.ObjectId,\n      ref: \"Category\",\n      required: true,\n    },\n    tags: [{ type: String, trim: true }],\n    variants: [variantSchema],\n    images: [{ type: String }],\n    stock: { type: Number, required: true, min: 0, default: 0 },\n    status: {\n      type: String,\n      enum: [\"active\", \"draft\", \"archived\"],\n      default: \"active\",\n    },\n    featured: { type: Boolean, default: false },\n    averageRating: { type: Number, default: 0, min: 0, max: 5 },\n    reviewCount: { type: Number, default: 0, min: 0 },\n    ratingDistribution: {\n      1: { type: Number, default: 0 },\n      2: { type: Number, default: 0 },\n      3: { type: Number, default: 0 },\n      4: { type: Number, default: 0 },\n      5: { type: Number, default: 0 },\n    },\n    weight: { type: Number, min: 0 },\n    dimensions: {\n      length: { type: Number, min: 0 },\n      width: { type: Number, min: 0 },\n      height: { type: Number, min: 0 },\n    },\n    seo: {\n      title: { type: String, trim: true },\n      description: { type: String, trim: true },\n    },\n    // New Kiti Locks specific fields\n    operationType: {\n      type: String,\n      enum: [\"Soft Close\", \"Non-Soft Close\"],\n    },\n    productCode: { type: String, trim: true },\n    usageArea: {\n      type: String,\n      enum: [\"Kitchen\", \"Wardrobe\", \"Drawer\", \"Overhead\"],\n    },\n    finish: {\n      type: String,\n      enum: [\"Chrome\", \"SS\", \"Matte\", \"Premium\", \"Aluminium\", \"PVC\"],\n    },\n    trackType: {\n      type: String,\n      enum: [\"2 Track\", \"3 Track\", \"Premium\"],\n    },\n    size: { type: String, trim: true },\n  },\n  {\n    timestamps: true,\n  },\n);\n\nproductSchema.index({ slug: 1 });\nproductSchema.index({ category: 1 });\nproductSchema.index({ status: 1 });\nproductSchema.index({ featured: 1 });\nproductSchema.index({ operationType: 1 });\nproductSchema.index({ usageArea: 1 });\nproductSchema.index({ finish: 1 });\nproductSchema.index({ trackType: 1 });\nproductSchema.index({ productCode: 1 });\nproductSchema.index({ name: \"text\", description: \"text\", tags: \"text\" });\n\nexport default mongoose.models.Product ||\n  mongoose.model<IProduct>(\"Product\", productSchema);\n","import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface ICategory extends Document {\n  name: string;\n  slug: string;\n  description?: string;\n  image?: string;\n  parent?: mongoose.Types.ObjectId;\n  featured: boolean;\n  sortOrder: number;\n  seo: {\n    title?: string;\n    description?: string;\n  };\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst categorySchema = new Schema<ICategory>(\n  {\n    name: { type: String, required: true, trim: true },\n    slug: {\n      type: String,\n      required: true,\n      lowercase: true,\n      trim: true,\n    },\n    description: { type: String, trim: true },\n    image: { type: String },\n    parent: { type: Schema.Types.ObjectId, ref: \"Category\" },\n    featured: { type: Boolean, default: false },\n    sortOrder: { type: Number, default: 0 },\n    seo: {\n      title: { type: String, trim: true },\n      description: { type: String, trim: true },\n    },\n  },\n  {\n    timestamps: true,\n  },\n);\n\ncategorySchema.index({ slug: 1 });\ncategorySchema.index({ parent: 1 });\ncategorySchema.index({ featured: 1 });\n\nexport default mongoose.models.Category ||\n  mongoose.model<ICategory>(\"Category\", categorySchema);\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport mongoose from \"mongoose\";\nimport Product from \"../models/Product\";\nimport Category from \"../models/Category\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n  optionalAuth,\n} from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = Router();\n\nconst productSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().min(1, \"Product description is required\"),\n  price: z.number().min(0, \"Price must be positive\"),\n  comparePrice: z.number().min(0).optional(),\n  category: z.string().min(1, \"Category is required\"),\n  tags: z.array(z.string()).default([]),\n  variants: z\n    .array(\n      z.object({\n        name: z.string(),\n        value: z.string(),\n        price: z.number().optional(),\n        stock: z.number().optional(),\n        sku: z.string().optional(),\n      }),\n    )\n    .default([]),\n  images: z.array(z.string()).default([]),\n  stock: z.number().min(0, \"Stock must be non-negative\").default(0),\n  status: z.enum([\"active\", \"draft\", \"archived\"]).default(\"active\"),\n  featured: z.boolean().default(false),\n  weight: z.number().min(0).optional(),\n  dimensions: z\n    .object({\n      length: z.number().min(0),\n      width: z.number().min(0),\n      height: z.number().min(0),\n    })\n    .optional(),\n  seo: z\n    .object({\n      title: z.string().optional(),\n      description: z.string().optional(),\n    })\n    .default({}),\n  // New Kiti Locks specific fields\n  operationType: z.enum([\"Soft Close\", \"Non-Soft Close\"]).optional(),\n  productCode: z.string().optional(),\n  usageArea: z.enum([\"Kitchen\", \"Wardrobe\", \"Drawer\", \"Overhead\"]).optional(),\n  finish: z\n    .enum([\"Chrome\", \"SS\", \"Matte\", \"Premium\", \"Aluminium\", \"PVC\"])\n    .optional(),\n  trackType: z.enum([\"2 Track\", \"3 Track\", \"Premium\"]).optional(),\n  size: z.string().optional(),\n});\n\nconst createSlug = (name: string): string => {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/-+/g, \"-\")\n    .trim(\"-\");\n};\n\nrouter.get(\n  \"/\",\n  optionalAuth,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const {\n        page = \"1\",\n        limit = \"12\",\n        category,\n        search,\n        minPrice,\n        maxPrice,\n        tags,\n        status = \"active\",\n        sort = \"createdAt\",\n        order = \"desc\",\n        featured,\n        inStock,\n        minRating,\n        operationType,\n        usageArea,\n        finish,\n        trackType,\n        productCode,\n        size,\n      } = req.query;\n\n      // Use mock data if MongoDB is not connected\n      if (!getConnectionStatus()) {\n        return res.status(503).json({\n          error:\n            \"Database connection required. Please ensure MongoDB is connected.\",\n        });\n      }\n      const filter: any = {};\n\n      if (req.user?.role === \"admin\") {\n        if (status && status !== \"all\") {\n          filter.status = status;\n        }\n      } else {\n        filter.status = \"active\";\n      }\n\n      if (category) {\n        // Check if category is an ObjectId or a slug\n        if (mongoose.Types.ObjectId.isValid(category)) {\n          filter.category = category;\n        } else {\n          // If it's a slug, find the category first\n          const categoryDoc = await Category.findOne({ slug: category });\n          if (categoryDoc) {\n            filter.category = categoryDoc._id;\n          }\n        }\n      }\n\n      if (search) {\n        filter.$text = { $search: search as string };\n      }\n\n      if (minPrice || maxPrice) {\n        filter.price = {};\n        if (minPrice) filter.price.$gte = Number(minPrice);\n        if (maxPrice) filter.price.$lte = Number(maxPrice);\n      }\n\n      if (tags) {\n        const tagArray = Array.isArray(tags) ? tags : [tags];\n        filter.tags = { $in: tagArray };\n      }\n\n      if (featured === \"true\") {\n        filter.featured = true;\n      }\n\n      if (inStock === \"true\") {\n        filter.stock = { $gt: 0 };\n      }\n\n      if (minRating && Number(minRating) > 0) {\n        filter.averageRating = { $gte: Number(minRating) };\n      }\n\n      // New Kiti Locks filters\n      if (operationType) {\n        filter.operationType = operationType;\n      }\n\n      if (usageArea) {\n        filter.usageArea = usageArea;\n      }\n\n      if (finish) {\n        filter.finish = finish;\n      }\n\n      if (trackType) {\n        filter.trackType = trackType;\n      }\n\n      if (productCode) {\n        filter.productCode = { $regex: productCode as string, $options: \"i\" };\n      }\n\n      if (size) {\n        filter.size = { $regex: size as string, $options: \"i\" };\n      }\n\n      const sortOrder = order === \"asc\" ? 1 : -1;\n      const sortObj: any = { [sort as string]: sortOrder };\n\n      const pageNum = parseInt(page as string);\n      const limitNum = parseInt(limit as string);\n      const skip = (pageNum - 1) * limitNum;\n\n      const products = await Product.find(filter)\n        .populate(\"category\", \"name slug\")\n        .sort(sortObj)\n        .skip(skip)\n        .limit(limitNum)\n        .select(\"-__v\");\n\n      const total = await Product.countDocuments(filter);\n      const totalPages = Math.ceil(total / limitNum);\n\n      res.json({\n        products,\n        pagination: {\n          currentPage: pageNum,\n          totalPages,\n          totalProducts: total,\n          hasNextPage: pageNum < totalPages,\n          hasPrevPage: pageNum > 1,\n        },\n      });\n    } catch (error) {\n      console.error(\"Get products error:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  },\n);\n\nrouter.get(\"/:slug\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { slug } = req.params;\n\n    const product = await Product.findOne({ slug })\n      .populate(\"category\", \"name slug\")\n      .select(\"-__v\");\n\n    if (!product) {\n      res.status(404).json({ error: \"Product not found\" });\n      return;\n    }\n\n    if (product.status !== \"active\") {\n      res.status(404).json({ error: \"Product not available\" });\n      return;\n    }\n\n    res.json({ product });\n  } catch (error) {\n    console.error(\"Get product error:\", error);\n    res.status(500).json({ error: \"Failed to fetch product\" });\n  }\n});\n\n// Get product by ID (for cart operations)\nrouter.get(\"/id/:id\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    const { id } = req.params;\n\n    const product = await Product.findById(id)\n      .populate(\"category\", \"name slug\")\n      .select(\"-__v\");\n\n    if (!product) {\n      res.status(404).json({ error: \"Product not found\" });\n      return;\n    }\n\n    if (product.status !== \"active\") {\n      res.status(404).json({ error: \"Product not available\" });\n      return;\n    }\n\n    res.json(product);\n  } catch (error) {\n    console.error(\"Get product by ID error:\", error);\n    res.status(500).json({ error: \"Failed to fetch product\" });\n  }\n});\n\nrouter.post(\n  \"/\",\n  authenticateToken,\n  requireAdmin,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const validatedData = productSchema.parse(req.body);\n\n      const category = await Category.findById(validatedData.category);\n      if (!category) {\n        res.status(400).json({ error: \"Invalid category\" });\n        return;\n      }\n\n      const slug = createSlug(validatedData.name);\n\n      const existingProduct = await Product.findOne({ slug });\n      if (existingProduct) {\n        res\n          .status(400)\n          .json({ error: \"Product with this name already exists\" });\n        return;\n      }\n\n      const product = new Product({\n        ...validatedData,\n        slug,\n      });\n\n      await product.save();\n      await product.populate(\"category\", \"name slug\");\n\n      res.status(201).json({\n        message: \"Product created successfully\",\n        product,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Create product error:\", error);\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  },\n);\n\nrouter.put(\n  \"/:id\",\n  authenticateToken,\n  requireAdmin,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const { id } = req.params;\n      const validatedData = productSchema.parse(req.body);\n\n      if (validatedData.category) {\n        const category = await Category.findById(validatedData.category);\n        if (!category) {\n          res.status(400).json({ error: \"Invalid category\" });\n          return;\n        }\n      }\n\n      let updateData: any = { ...validatedData };\n\n      if (validatedData.name) {\n        const newSlug = createSlug(validatedData.name);\n        const existingProduct = await Product.findOne({\n          slug: newSlug,\n          _id: { $ne: id },\n        });\n        if (existingProduct) {\n          res\n            .status(400)\n            .json({ error: \"Product with this name already exists\" });\n          return;\n        }\n        updateData.slug = newSlug;\n      }\n\n      const product = await Product.findByIdAndUpdate(id, updateData, {\n        new: true,\n        runValidators: true,\n      }).populate(\"category\", \"name slug\");\n\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Product updated successfully\",\n        product,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Update product error:\", error);\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  },\n);\n\nrouter.delete(\n  \"/:id\",\n  authenticateToken,\n  requireAdmin,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const { id } = req.params;\n\n      const product = await Product.findByIdAndDelete(id);\n\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Product deleted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Delete product error:\", error);\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  },\n);\n\n// Get filter options for product filtering\nrouter.get(\n  \"/filters/options\",\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        return res.status(503).json({\n          error:\n            \"Database connection required. Please ensure MongoDB is connected.\",\n        });\n      }\n\n      // Get distinct values for filter options\n      const [operationTypes, usageAreas, finishes, trackTypes, categories] =\n        await Promise.all([\n          Product.distinct(\"operationType\", { status: \"active\" }),\n          Product.distinct(\"usageArea\", { status: \"active\" }),\n          Product.distinct(\"finish\", { status: \"active\" }),\n          Product.distinct(\"trackType\", { status: \"active\" }),\n          Category.find({ featured: true }).select(\"name slug\"),\n        ]);\n\n      res.json({\n        operationTypes: operationTypes.filter(Boolean),\n        usageAreas: usageAreas.filter(Boolean),\n        finishes: finishes.filter(Boolean),\n        trackTypes: trackTypes.filter(Boolean),\n        categories,\n      });\n    } catch (error) {\n      console.error(\"Get filter options error:\", error);\n      res.status(500).json({ error: \"Failed to fetch filter options\" });\n    }\n  },\n);\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport Category from \"../models/Category\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n} from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = Router();\n\nconst categorySchema = z.object({\n  name: z.string().min(1, \"Category name is required\"),\n  description: z.string().optional(),\n  image: z.string().optional(),\n  parent: z.string().optional(),\n  featured: z.boolean().default(false),\n  sortOrder: z.number().default(0),\n  seo: z\n    .object({\n      title: z.string().optional(),\n      description: z.string().optional(),\n    })\n    .default({}),\n});\n\nconst createSlug = (name: string): string => {\n  return name\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, \"\")\n    .replace(/\\s+/g, \"-\")\n    .replace(/-+/g, \"-\")\n    .replace(/^-+|-+$/g, \"\");\n};\n\nrouter.get(\"/\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { featured, parent, includeStats } = req.query;\n\n    // Require database connection - no mock data\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n    \n    let categories;\n    \n    if (includeStats) {\n      // Use aggregation to include product counts\n      const pipeline: any[] = [\n        {\n          $lookup: {\n            from: \"products\",\n            localField: \"_id\",\n            foreignField: \"category\",\n            as: \"products\"\n          }\n        },\n        {\n          $lookup: {\n            from: \"categories\",\n            localField: \"parent\",\n            foreignField: \"_id\",\n            as: \"parentInfo\"\n          }\n        },\n        {\n          $addFields: {\n            productCount: { $size: \"$products\" },\n            parent: { $arrayElemAt: [\"$parentInfo\", 0] }\n          }\n        },\n        {\n          $project: {\n            name: 1,\n            slug: 1,\n            description: 1,\n            image: 1,\n            featured: 1,\n            sortOrder: 1,\n            seo: 1,\n            productCount: 1,\n            parent: {\n              _id: 1,\n              name: 1,\n              slug: 1\n            }\n          }\n        }\n      ];\n\n      // Add filters if needed\n      const matchStage: any = {};\n      if (featured === \"true\") {\n        matchStage.featured = true;\n      }\n      if (parent) {\n        matchStage.parent = parent;\n      } else if (parent === \"null\") {\n        matchStage.parent = null;\n      }\n      \n      if (Object.keys(matchStage).length > 0) {\n        pipeline.unshift({ $match: matchStage });\n      }\n\n      pipeline.push({ $sort: { sortOrder: 1, name: 1 } });\n\n      categories = await Category.aggregate(pipeline);\n    } else {\n      const filter: any = {};\n\n      if (featured === \"true\") {\n        filter.featured = true;\n      }\n\n      if (parent) {\n        filter.parent = parent;\n      } else if (parent === \"null\") {\n        filter.parent = null;\n      }\n\n      categories = await Category.find(filter)\n        .populate(\"parent\", \"name slug\")\n        .sort({ sortOrder: 1, name: 1 })\n        .select(\"-__v\");\n    }\n\n    res.json({ categories });\n  } catch (error) {\n    console.error(\"Get categories error:\", error);\n    res.status(500).json({ error: \"Failed to fetch categories\" });\n  }\n});\n\nrouter.get(\"/:slug\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { slug } = req.params;\n\n    const category = await Category.findOne({ slug })\n      .populate(\"parent\", \"name slug\")\n      .select(\"-__v\");\n\n    if (!category) {\n      res.status(404).json({ error: \"Category not found\" });\n      return;\n    }\n\n    const children = await Category.find({ parent: category._id })\n      .sort({ sortOrder: 1, name: 1 })\n      .select(\"name slug image\");\n\n    res.json({\n      category,\n      children,\n    });\n  } catch (error) {\n    console.error(\"Get category error:\", error);\n    res.status(500).json({ error: \"Failed to fetch category\" });\n  }\n});\n\nrouter.post(\n  \"/\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const validatedData = categorySchema.parse(req.body);\n\n      if (validatedData.parent) {\n        const parentCategory = await Category.findById(validatedData.parent);\n        if (!parentCategory) {\n          res.status(400).json({ error: \"Invalid parent category\" });\n          return;\n        }\n      }\n\n      const slug = createSlug(validatedData.name);\n\n      const existingCategory = await Category.findOne({ slug });\n      if (existingCategory) {\n        res\n          .status(400)\n          .json({ error: \"Category with this name already exists\" });\n        return;\n      }\n\n      const category = new Category({\n        ...validatedData,\n        slug,\n      });\n\n      await category.save();\n      await category.populate(\"parent\", \"name slug\");\n\n      res.status(201).json({\n        message: \"Category created successfully\",\n        category,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Create category error:\", error);\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  },\n);\n\nrouter.put(\n  \"/:id\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const { id } = req.params;\n      const validatedData = categorySchema.parse(req.body);\n\n      if (validatedData.parent) {\n        if (validatedData.parent === id) {\n          res.status(400).json({ error: \"Category cannot be its own parent\" });\n          return;\n        }\n\n        const parentCategory = await Category.findById(validatedData.parent);\n        if (!parentCategory) {\n          res.status(400).json({ error: \"Invalid parent category\" });\n          return;\n        }\n      }\n\n      let updateData: any = { ...validatedData };\n\n      if (validatedData.name) {\n        const newSlug = createSlug(validatedData.name);\n        const existingCategory = await Category.findOne({\n          slug: newSlug,\n          _id: { $ne: id },\n        });\n        if (existingCategory) {\n          res\n            .status(400)\n            .json({ error: \"Category with this name already exists\" });\n          return;\n        }\n        updateData.slug = newSlug;\n      }\n\n      const category = await Category.findByIdAndUpdate(id, updateData, {\n        new: true,\n        runValidators: true,\n      }).populate(\"parent\", \"name slug\");\n\n      if (!category) {\n        res.status(404).json({ error: \"Category not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Category updated successfully\",\n        category,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Update category error:\", error);\n      res.status(500).json({ error: \"Failed to update category\" });\n    }\n  },\n);\n\nrouter.delete(\n  \"/:id\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const authReq = req as AuthRequest;\n      const { id } = req.params;\n\n      const hasChildren = await Category.findOne({ parent: id });\n      if (hasChildren) {\n        res.status(400).json({\n          error: \"Cannot delete category with subcategories\",\n        });\n        return;\n      }\n\n      const category = await Category.findByIdAndDelete(id);\n\n      if (!category) {\n        res.status(404).json({ error: \"Category not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Category deleted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Delete category error:\", error);\n      res.status(500).json({ error: \"Failed to delete category\" });\n    }\n  },\n);\n\nexport default router;\n","import express, { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport User from \"../models/User\";\nimport Product from \"../models/Product\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = express.Router();\n\nconst addToCartSchema = z.object({\n  productId: z.string().min(1, \"Product ID is required\"),\n  quantity: z.number().min(1, \"Quantity must be at least 1\"),\n  variant: z\n    .object({\n      name: z.string(),\n      value: z.string(),\n    })\n    .optional(),\n});\n\nconst updateCartItemSchema = z.object({\n  productId: z.string().min(1, \"Product ID is required\"),\n  quantity: z.number().min(0, \"Quantity must be at least 0\"),\n  variant: z\n    .object({\n      name: z.string(),\n      value: z.string(),\n    })\n    .optional(),\n});\n\n// Get user's cart (for logged-in users)\nrouter.get(\n  \"/\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId).populate({\n        path: \"cart.product\",\n        model: \"Product\",\n        populate: {\n          path: \"category\",\n          model: \"Category\",\n        },\n      });\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      // Filter out cart items with null product\n      const filteredCart = (user.cart || []).filter((item: any) => item.product);\n      res.json({ cart: filteredCart });\n    } catch (error) {\n      console.error(\"Get cart error:\", error);\n      res.status(500).json({ error: \"Failed to fetch cart\" });\n    }\n  },\n);\n\n// Add item to cart\nrouter.post(\n  \"/add\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { productId, quantity, variant } = addToCartSchema.parse(req.body);\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n      const product = await Product.findById(productId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      if (product.stock < quantity) {\n        res.status(400).json({ error: \"Insufficient stock\" });\n        return;\n      }\n\n      // Initialize cart if it doesn't exist\n      if (!user.cart) {\n        user.cart = [];\n      }\n\n      // Check if item already exists in cart\n      const existingItemIndex = user.cart.findIndex(\n        (item: any) =>\n          item.product.toString() === productId &&\n          JSON.stringify(item.variant) === JSON.stringify(variant),\n      );\n\n      if (existingItemIndex > -1) {\n        // Update existing item\n        user.cart[existingItemIndex].quantity += quantity;\n      } else {\n        // Add new item\n        user.cart.push({\n          product: productId,\n          quantity,\n          variant,\n          addedAt: new Date(),\n        });\n      }\n\n      await user.save();\n\n      res.json({ message: \"Item added to cart successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Add to cart error:\", error);\n      res.status(500).json({ error: \"Failed to add item to cart\" });\n    }\n  },\n);\n\n// Update cart item quantity\nrouter.put(\n  \"/update\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { productId, quantity, variant } = updateCartItemSchema.parse(req.body);\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      if (!user.cart) {\n        res.status(404).json({ error: \"Cart is empty\" });\n        return;\n      }\n\n      // Find the item in cart\n      const itemIndex = user.cart.findIndex(\n        (item: any) =>\n          item.product.toString() === productId &&\n          JSON.stringify(item.variant) === JSON.stringify(variant),\n      );\n\n      if (itemIndex === -1) {\n        res.status(404).json({ error: \"Item not found in cart\" });\n        return;\n      }\n\n      if (quantity === 0) {\n        // Remove item if quantity is 0\n        user.cart.splice(itemIndex, 1);\n      } else {\n        // Update quantity\n        user.cart[itemIndex].quantity = quantity;\n      }\n\n      await user.save();\n\n      res.json({ message: \"Cart updated successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Update cart error:\", error);\n      res.status(500).json({ error: \"Failed to update cart\" });\n    }\n  },\n);\n\n// Remove item from cart\nrouter.delete(\n  \"/remove/:productId\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { productId } = req.params;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      if (!user.cart) {\n        res.status(404).json({ error: \"Cart is empty\" });\n        return;\n      }\n\n      // Remove item from cart\n      user.cart = user.cart.filter((item: any) => item.product.toString() !== productId);\n\n      await user.save();\n\n      res.json({ message: \"Item removed from cart successfully\" });\n    } catch (error) {\n      console.error(\"Remove from cart error:\", error);\n      res.status(500).json({ error: \"Failed to remove item from cart\" });\n    }\n  },\n);\n\n// Clear cart\nrouter.delete(\n  \"/clear\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const authReq = req as AuthRequest;\n      const user = await User.findById(authReq.user?.userId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      user.cart = [];\n      await user.save();\n\n      res.json({ message: \"Cart cleared successfully\" });\n    } catch (error) {\n      console.error(\"Clear cart error:\", error);\n      res.status(500).json({ error: \"Failed to clear cart\" });\n    }\n  },\n);\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport User from \"../models/User\";\nimport Product from \"../models/Product\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = Router();\n\nconst addToWishlistSchema = z.object({\n  productId: z.string().min(1, \"Product ID is required\"),\n});\n\n// Get user's wishlist\nrouter.get(\n  \"/\",\n  authenticateToken,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const user = await User.findById(req.user?.userId).populate({\n        path: \"wishlist\",\n        model: \"Product\",\n        populate: {\n          path: \"category\",\n          model: \"Category\",\n        },\n      });\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      // Transform wishlist items to match client expectations\n      const wishlistItems = (user.wishlist || []).map((product: any) => ({\n        _id: product._id,\n        product: product,\n        dateAdded: new Date().toISOString(), // We don't have actual date added, so use current\n      }));\n\n      res.json({ wishlist: wishlistItems });\n    } catch (error) {\n      console.error(\"Get wishlist error:\", error);\n      res.status(500).json({ error: \"Failed to fetch wishlist\" });\n    }\n  },\n);\n\n// Add item to wishlist\nrouter.post(\n  \"/add\",\n  authenticateToken,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const { productId } = addToWishlistSchema.parse(req.body);\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const user = await User.findById(req.user?.userId);\n      const product = await Product.findById(productId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      // Check if product is already in wishlist\n      if (user.wishlist.includes(productId as any)) {\n        res.status(400).json({ error: \"Product already in wishlist\" });\n        return;\n      }\n\n      user.wishlist.push(productId as any);\n      await user.save();\n\n      res.json({ message: \"Item added to wishlist successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Add to wishlist error:\", error);\n      res.status(500).json({ error: \"Failed to add item to wishlist\" });\n    }\n  },\n);\n\n// Remove item from wishlist\nrouter.delete(\n  \"/:productId\",\n  authenticateToken,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { productId } = req.params;\n\n      const user = await User.findById(req.user?.userId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      user.wishlist = user.wishlist.filter(\n        (id: any) => id.toString() !== productId,\n      );\n\n      await user.save();\n\n      res.json({ message: \"Item removed from wishlist successfully\" });\n    } catch (error) {\n      console.error(\"Remove from wishlist error:\", error);\n      res.status(500).json({ error: \"Failed to remove item from wishlist\" });\n    }\n  },\n);\n\n// Toggle item in wishlist (add if not present, remove if present)\nrouter.post(\n  \"/toggle\",\n  authenticateToken,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const { productId } = addToWishlistSchema.parse(req.body);\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const user = await User.findById(req.user?.userId);\n      const product = await Product.findById(productId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      const isInWishlist = user.wishlist.includes(productId as any);\n\n      if (isInWishlist) {\n        // Remove from wishlist\n        user.wishlist = user.wishlist.filter(\n          (id: any) => id.toString() !== productId,\n        );\n        await user.save();\n        res.json({\n          message: \"Item removed from wishlist\",\n          inWishlist: false,\n        });\n      } else {\n        // Add to wishlist\n        user.wishlist.push(productId as any);\n        await user.save();\n        res.json({\n          message: \"Item added to wishlist\",\n          inWishlist: true,\n        });\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Toggle wishlist error:\", error);\n      res.status(500).json({ error: \"Failed to toggle wishlist item\" });\n    }\n  },\n);\n\n// Clear entire wishlist\nrouter.delete(\n  \"/\",\n  authenticateToken,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const user = await User.findById(req.user?.userId);\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      user.wishlist = [];\n      await user.save();\n\n      res.json({ message: \"Wishlist cleared successfully\" });\n    } catch (error) {\n      console.error(\"Clear wishlist error:\", error);\n      res.status(500).json({ error: \"Failed to clear wishlist\" });\n    }\n  },\n);\n\nexport default router;\n","import { v2 as cloudinary } from \"cloudinary\";\nimport dotenv from \"dotenv\";\n\n// Load environment variables\ndotenv.config();\n\ncloudinary.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n});\n\nexport default cloudinary;\n","import { Router, Request, Response } from \"express\";\nimport multer from \"multer\";\nimport cloudinary from \"../config/cloudinary\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n} from \"../middleware/auth\";\n\nconst router = Router();\n\n// Secure file validation\nconst ALLOWED_MIME_TYPES = [\n  \"image/jpeg\",\n  \"image/jpg\",\n  \"image/png\",\n  \"image/webp\",\n];\n\nconst ALLOWED_EXTENSIONS = [\".jpg\", \".jpeg\", \".png\", \".webp\"];\n\nconst isValidImage = (file: Express.Multer.File): boolean => {\n  // Check MIME type\n  if (!ALLOWED_MIME_TYPES.includes(file.mimetype)) {\n    return false;\n  }\n\n  // Check file extension\n  const ext = file.originalname.toLowerCase().match(/\\.[^/.]+$/);\n  if (!ext || !ALLOWED_EXTENSIONS.includes(ext[0])) {\n    return false;\n  }\n\n  // Check for malicious file names\n  if (\n    file.originalname.includes(\"..\") ||\n    file.originalname.includes(\"/\") ||\n    file.originalname.includes(\"\\\\\")\n  ) {\n    return false;\n  }\n\n  return true;\n};\n\n// Configure multer for memory storage with enhanced security\nconst storage = multer.memoryStorage();\nconst upload = multer({\n  storage,\n  limits: {\n    fileSize: 2 * 1024 * 1024, // 2MB limit (reduced for security)\n    files: 5, // Maximum 5 files\n    fieldNameSize: 100, // Limit field name size\n    fieldSize: 1024 * 1024, // Limit field size to 1MB\n  },\n  fileFilter: (req, file, cb) => {\n    try {\n      // Enhanced security validation\n      if (!isValidImage(file)) {\n        cb(\n          new Error(\n            \"Invalid file type. Only JPG, PNG, and WebP images are allowed.\",\n          ),\n        );\n        return;\n      }\n\n      // Check file size (additional check)\n      if (file.size && file.size > 2 * 1024 * 1024) {\n        cb(new Error(\"File too large. Maximum size is 2MB.\"));\n        return;\n      }\n\n      cb(null, true);\n    } catch (error) {\n      cb(new Error(\"File validation failed\"));\n    }\n  },\n});\n\n// Upload single image\nrouter.post(\n  \"/image\",\n  authenticateToken,\n  requireAdmin,\n  upload.single(\"image\"),\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      if (!req.file) {\n        res.status(400).json({ error: \"No image file provided\" });\n        return;\n      }\n\n      // Upload to Cloudinary\n      const result = await new Promise((resolve, reject) => {\n        cloudinary.uploader\n          .upload_stream(\n            {\n              folder: \"kiti-locks\",\n              resource_type: \"image\",\n              transformation: [\n                { width: 800, height: 800, crop: \"limit\" },\n                { quality: \"auto:best\" },\n                { format: \"auto\" },\n                { flags: \"sanitize\" }, // Sanitize uploaded images\n              ],\n              // Security options\n              upload_preset: undefined, // Don't allow unsigned uploads\n              public_id: `product-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n            },\n            (error, result) => {\n              if (error) reject(error);\n              else resolve(result);\n            },\n          )\n          .end(req.file!.buffer);\n      });\n\n      const uploadResult = result as any;\n\n      res.json({\n        message: \"Image uploaded successfully\",\n        url: uploadResult.secure_url,\n        publicId: uploadResult.public_id,\n      });\n    } catch (error) {\n      console.error(\"Image upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload image\" });\n    }\n  },\n);\n\n// Upload multiple images\nrouter.post(\n  \"/images\",\n  authenticateToken,\n  requireAdmin,\n  upload.array(\"images\", 5),\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const files = req.files as Express.Multer.File[];\n\n      if (!files || files.length === 0) {\n        res.status(400).json({ error: \"No image files provided\" });\n        return;\n      }\n\n      // Upload all images to Cloudinary\n      const uploadPromises = files.map((file) => {\n        return new Promise((resolve, reject) => {\n          cloudinary.uploader\n            .upload_stream(\n              {\n                folder: \"kiti-locks\",\n                resource_type: \"image\",\n                transformation: [\n                  { width: 800, height: 800, crop: \"limit\" },\n                  { quality: \"auto:best\" },\n                  { format: \"auto\" },\n                  { flags: \"sanitize\" },\n                ],\n                public_id: `product-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n              },\n              (error, result) => {\n                if (error) reject(error);\n                else resolve(result);\n              },\n            )\n            .end(file.buffer);\n        });\n      });\n\n      const results = await Promise.all(uploadPromises);\n\n      const urls = results.map((result: any) => ({\n        url: result.secure_url,\n        publicId: result.public_id,\n      }));\n\n      res.json({\n        message: \"Images uploaded successfully\",\n        images: urls,\n      });\n    } catch (error) {\n      console.error(\"Images upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload images\" });\n    }\n  },\n);\n\n// Upload avatar for user profile\nrouter.post(\n  \"/avatar\",\n  authenticateToken,\n  upload.single(\"avatar\"),\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      if (!req.file) {\n        res.status(400).json({ error: \"No avatar file provided\" });\n        return;\n      }\n\n      // Validate file type and size\n      if (!isValidImage(req.file)) {\n        res.status(400).json({ error: \"Invalid image file type\" });\n        return;\n      }\n\n      if (req.file.size > 5 * 1024 * 1024) {\n        // 5MB limit\n        res.status(400).json({ error: \"File size too large (max 5MB)\" });\n        return;\n      }\n\n      // Upload to Cloudinary\n      const result = await cloudinary.uploader.upload(\n        `data:${req.file.mimetype};base64,${req.file.buffer.toString(\"base64\")}`,\n        {\n          folder: \"avatars\",\n          transformation: [\n            { width: 400, height: 400, crop: \"fill\" }, // Square avatar\n            { quality: \"auto\" }, // Auto quality\n            { flags: \"sanitize\" }, // Sanitize uploaded images\n          ],\n        },\n      );\n\n      // Update user's avatar URL in database\n      const User = (await import(\"../models/User\")).default;\n      await User.findByIdAndUpdate(req.user?.userId, {\n        avatar: result.secure_url,\n      });\n\n      res.json({\n        message: \"Avatar uploaded successfully\",\n        avatarUrl: result.secure_url,\n      });\n    } catch (error) {\n      console.error(\"Avatar upload error:\", error);\n      res.status(500).json({ error: \"Failed to upload avatar\" });\n    }\n  },\n);\n\n// Delete image from Cloudinary\nrouter.delete(\n  \"/image/:publicId\",\n  authenticateToken,\n  requireAdmin,\n  async (req: AuthRequest, res: Response): Promise<void> => {\n    try {\n      const { publicId } = req.params;\n\n      await cloudinary.uploader.destroy(publicId);\n\n      res.json({\n        message: \"Image deleted successfully\",\n      });\n    } catch (error) {\n      console.error(\"Image delete error:\", error);\n      res.status(500).json({ error: \"Failed to delete image\" });\n    }\n  },\n);\n\nexport default router;\n","import mongoose, { Document, Schema } from \"mongoose\";\nimport { IAddress } from \"./User\";\n\nexport interface IOrderItem {\n  product: mongoose.Types.ObjectId;\n  name: string;\n  price: number;\n  quantity: number;\n  variant?: {\n    name: string;\n    value: string;\n  };\n  image: string;\n}\n\nexport interface IOrder extends Document {\n  orderNumber: string;\n  user: mongoose.Types.ObjectId;\n  items: IOrderItem[];\n  subtotal: number;\n  tax: number;\n  shipping: number;\n  total: number;\n  status:\n    | \"pending\"\n    | \"confirmed\"\n    | \"processing\"\n    | \"shipped\"\n    | \"delivered\";\n  paymentStatus: \"pending\" | \"paid\" | \"failed\";\n  paymentMethod: string;\n  paymentIntentId: string;\n  // Razorpay specific fields\n  razorpayOrderId?: string;\n  razorpayPaymentId?: string;\n  razorpaySignature?: string;\n  // Legacy Stripe fields\n  stripeSessionId?: string;\n  shippingAddress: IAddress;\n  billingAddress: IAddress;\n  notes?: string;\n  trackingNumber?: string;\n  trackingUrl?: string;\n  estimatedDelivery?: Date;\n  shippedAt?: Date;\n  deliveredAt?: Date;\n  // Shiprocket integration fields\n  shipment_id?: string;\n  awb_code?: string;\n  courier_company_id?: string;\n  shiprocket_tracking_url?: string;\n  order_created_on_shiprocket?: boolean;\n  // Removed cancellation and refund fields per user request\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst orderItemSchema = new Schema<IOrderItem>({\n  product: { type: Schema.Types.ObjectId, ref: \"Product\", required: true },\n  name: { type: String, required: true },\n  price: { type: Number, required: true, min: 0 },\n  quantity: { type: Number, required: true, min: 1 },\n  variant: {\n    name: { type: String },\n    value: { type: String },\n  },\n  image: { type: String, required: true },\n});\n\nconst addressSchema = new Schema<IAddress>({\n  type: { type: String, enum: [\"billing\", \"shipping\"], required: true },\n  firstName: { type: String, required: true },\n  lastName: { type: String, required: true },\n  address1: { type: String, required: true },\n  address2: { type: String },\n  city: { type: String, required: true },\n  state: { type: String, required: true },\n  zipCode: { type: String, required: true },\n  country: { type: String, required: true, default: \"US\" },\n  isDefault: { type: Boolean, default: false },\n});\n\nconst orderSchema = new Schema<IOrder>(\n  {\n    orderNumber: { type: String, required: true },\n    user: { type: Schema.Types.ObjectId, ref: \"User\", required: true },\n    items: [orderItemSchema],\n    subtotal: { type: Number, required: true, min: 0 },\n    tax: { type: Number, required: true, min: 0, default: 0 },\n    shipping: { type: Number, required: true, min: 0, default: 0 },\n    total: { type: Number, required: true, min: 0 },\n    status: {\n      type: String,\n      enum: [\n        \"pending\",\n        \"confirmed\",\n        \"processing\",\n        \"shipped\",\n        \"delivered\",\n      ],\n      default: \"pending\",\n    },\n    paymentStatus: {\n      type: String,\n      enum: [\"pending\", \"paid\", \"failed\"],\n      default: \"pending\",\n    },\n    paymentMethod: { type: String, required: true },\n    paymentIntentId: { type: String, required: true },\n    // Razorpay specific fields\n    razorpayOrderId: { type: String },\n    razorpayPaymentId: { type: String },\n    razorpaySignature: { type: String },\n    // Legacy Stripe fields\n    stripeSessionId: { type: String },\n    shippingAddress: { type: addressSchema, required: true },\n    billingAddress: { type: addressSchema, required: true },\n    notes: { type: String, trim: true },\n    trackingNumber: { type: String, trim: true },\n    trackingUrl: { type: String, trim: true },\n    estimatedDelivery: { type: Date },\n    shippedAt: { type: Date },\n    deliveredAt: { type: Date },\n    // Shiprocket integration fields\n    shipment_id: { type: String, trim: true },\n    awb_code: { type: String, trim: true },\n    courier_company_id: { type: String, trim: true },\n    shiprocket_tracking_url: { type: String, trim: true },\n    order_created_on_shiprocket: { type: Boolean, default: false },\n  },\n  {\n    timestamps: true,\n  },\n);\n\norderSchema.index({ user: 1 });\norderSchema.index({ orderNumber: 1 });\norderSchema.index({ status: 1 });\norderSchema.index({ paymentStatus: 1 });\n\n// Fix for Mongoose/TypeScript linter errors in routes\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst OrderModel: any = mongoose.models.Order || mongoose.model<IOrder>(\"Order\", orderSchema);\nexport default OrderModel;\n","import nodemailer from \"nodemailer\";\n\ninterface OrderEmailData {\n  orderId: string;\n  customerName: string;\n  customerEmail: string;\n  items: Array<{\n    name: string;\n    quantity: number;\n    price: number;\n  }>;\n  totalAmount: number;\n  shippingAddress?: {\n    firstName: string;\n    lastName: string;\n    address: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n}\n\ninterface EmailService {\n  sendOrderConfirmation: (orderData: OrderEmailData) => Promise<void>;\n  sendOrderShipped: (\n    orderData: OrderEmailData,\n    trackingNumber?: string,\n  ) => Promise<void>;\n  sendOrderDelivered: (orderData: OrderEmailData) => Promise<void>;\n}\n\nclass NodemailerEmailService implements EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    this.transporter = nodemailer.createTransport({\n      service: \"gmail\", // You can change this to your preferred email service\n      auth: {\n        user: process.env.NODE_MAILER_EMAIL || \"noreply@bathroomhardware.com\",\n        pass: process.env.NODE_MAILER_PASS || \"your-app-password\",\n      },\n    });\n  }\n\n  private formatPrice(price: number): string {\n    return new Intl.NumberFormat(\"en-US\", {\n      style: \"currency\",\n      currency: \"USD\",\n    }).format(price);\n  }\n\n  private generateOrderEmailTemplate(\n    orderData: OrderEmailData,\n    type: \"confirmation\" | \"shipped\" | \"delivered\",\n    trackingNumber?: string,\n  ): { subject: string; html: string } {\n    const { orderId, customerName, items, totalAmount, shippingAddress } =\n      orderData;\n\n    let subject = \"\";\n    let statusMessage = \"\";\n    let additionalInfo = \"\";\n\n    switch (type) {\n      case \"confirmation\":\n        subject = `Order Confirmation - #${orderId}`;\n        statusMessage =\n          \"Thank you for your order! We've received your payment and will begin processing your order shortly.\";\n        additionalInfo = `\n          <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n            <h3 style=\"color: #495057; margin-top: 0;\">What happens next?</h3>\n            <ul style=\"color: #6c757d; line-height: 1.6;\">\n              <li>We'll process your order within 1-2 business days</li>\n              <li>You'll receive a shipping notification with tracking information</li>\n              <li>Your order will arrive within 3-5 business days</li>\n            </ul>\n          </div>\n        `;\n        break;\n      case \"shipped\":\n        subject = `Order Shipped - #${orderId}`;\n        statusMessage =\n          \"Great news! Your order has been shipped and is on its way to you.\";\n        additionalInfo = trackingNumber\n          ? `\n          <div style=\"background-color: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n            <h3 style=\"color: #0056b3; margin-top: 0;\">Tracking Information</h3>\n            <p style=\"color: #495057; font-size: 16px; margin: 0;\">\n              <strong>Tracking Number:</strong> ${trackingNumber}\n            </p>\n            <p style=\"color: #6c757d; margin: 10px 0 0 0;\">\n              You can track your package using this number on our shipping partner's website.\n            </p>\n          </div>\n          `\n          : \"\";\n        break;\n      case \"delivered\":\n        subject = `Order Delivered - #${orderId}`;\n        statusMessage =\n          \"Your order has been successfully delivered! We hope you love your new bathroom hardware.\";\n        additionalInfo = `\n          <div style=\"background-color: #d4edda; padding: 15px; border-radius: 5px; margin: 20px 0;\">\n            <h3 style=\"color: #155724; margin-top: 0;\">How was your experience?</h3>\n            <p style=\"color: #495057; margin: 0;\">\n              We'd love to hear about your experience! Please consider leaving a review for the products you purchased.\n            </p>\n          </div>\n        `;\n        break;\n    }\n\n    const html = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${subject}</title>\n      </head>\n      <body style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;\">\n        <div style=\"background-color: #f8f9fa; padding: 30px; border-radius: 10px;\">\n          <!-- Header -->\n          <div style=\"text-align: center; border-bottom: 2px solid #e9ecef; padding-bottom: 20px; margin-bottom: 30px;\">\n            <h1 style=\"color: #495057; margin: 0; font-size: 28px;\">Kiti Locks</h1>\n            <p style=\"color: #6c757d; margin: 5px 0 0 0;\">Premium Bathroom Hardware & Accessories</p>\n          </div>\n\n          <!-- Greeting -->\n          <h2 style=\"color: #495057; margin-bottom: 20px;\">Hello ${customerName},</h2>\n          \n          <!-- Status Message -->\n          <p style=\"font-size: 16px; color: #495057; margin-bottom: 25px;\">${statusMessage}</p>\n\n          <!-- Order Details -->\n          <div style=\"background-color: white; padding: 20px; border-radius: 5px; border: 1px solid #dee2e6;\">\n            <h3 style=\"color: #495057; margin-top: 0; border-bottom: 1px solid #e9ecef; padding-bottom: 10px;\">\n              Order Details - #${orderId}\n            </h3>\n            \n            <!-- Items -->\n            <table style=\"width: 100%; border-collapse: collapse; margin-bottom: 20px;\">\n              <thead>\n                <tr style=\"background-color: #f8f9fa;\">\n                  <th style=\"padding: 10px; text-align: left; border-bottom: 1px solid #dee2e6;\">Item</th>\n                  <th style=\"padding: 10px; text-align: center; border-bottom: 1px solid #dee2e6;\">Qty</th>\n                  <th style=\"padding: 10px; text-align: right; border-bottom: 1px solid #dee2e6;\">Price</th>\n                </tr>\n              </thead>\n              <tbody>\n                ${items\n                  .map(\n                    (item) => `\n                  <tr>\n                    <td style=\"padding: 10px; border-bottom: 1px solid #f1f3f4;\">${item.name}</td>\n                    <td style=\"padding: 10px; text-align: center; border-bottom: 1px solid #f1f3f4;\">${item.quantity}</td>\n                    <td style=\"padding: 10px; text-align: right; border-bottom: 1px solid #f1f3f4;\">${this.formatPrice(item.price * item.quantity)}</td>\n                  </tr>\n                `,\n                  )\n                  .join(\"\")}\n              </tbody>\n              <tfoot>\n                <tr style=\"background-color: #f8f9fa;\">\n                  <td colspan=\"2\" style=\"padding: 15px; font-weight: bold; border-top: 2px solid #dee2e6;\">Total:</td>\n                  <td style=\"padding: 15px; text-align: right; font-weight: bold; font-size: 18px; color: #28a745; border-top: 2px solid #dee2e6;\">\n                    ${this.formatPrice(totalAmount)}\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n\n            <!-- Shipping Address -->\n            ${\n              shippingAddress\n                ? `\n            <div style=\"margin-top: 20px;\">\n              <h4 style=\"color: #495057; margin-bottom: 10px;\">Shipping Address:</h4>\n              <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 5px;\">\n                <p style=\"margin: 0; line-height: 1.4;\">\n                  ${shippingAddress.firstName} ${shippingAddress.lastName}<br>\n                  ${shippingAddress.address}<br>\n                  ${shippingAddress.city}, ${shippingAddress.state} ${shippingAddress.zipCode}<br>\n                  ${shippingAddress.country}\n                </p>\n              </div>\n            </div>\n            `\n                : \"\"\n            }\n          </div>\n\n          ${additionalInfo}\n\n          <!-- Footer -->\n          <div style=\"text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e9ecef;\">\n            <p style=\"color: #6c757d; margin: 0; font-size: 14px;\">\n              Questions about your order? Contact us at \n              <a href=\"mailto:support@bathroomhardware.com\" style=\"color: #007bff;\">support@bathroomhardware.com</a>\n            </p>\n            <p style=\"color: #6c757d; margin: 10px 0 0 0; font-size: 12px;\">\n              Kiti Locks | Premium Bathroom Hardware & Accessories<br>\n              © 2024 Kiti Locks. All rights reserved.\n            </p>\n          </div>\n        </div>\n      </body>\n      </html>\n    `;\n\n    return { subject, html };\n  }\n\n  async sendOrderConfirmation(orderData: OrderEmailData): Promise<void> {\n    try {\n      const { subject, html } = this.generateOrderEmailTemplate(\n        orderData,\n        \"confirmation\",\n      );\n\n      await this.transporter.sendMail({\n        from: `\"Kiti Locks\" <${process.env.NODE_MAILER_EMAIL || \"noreply@bathroomhardware.com\"}>`,\n        to: orderData.customerEmail,\n        subject,\n        html,\n      });\n\n      console.log(\n        `Order confirmation email sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n      );\n    } catch (error) {\n      console.error(\"Failed to send order confirmation email:\", error);\n      // Don't throw error to avoid blocking the order process\n    }\n  }\n\n  async sendOrderShipped(\n    orderData: OrderEmailData,\n    trackingNumber?: string,\n  ): Promise<void> {\n    try {\n      const { subject, html } = this.generateOrderEmailTemplate(\n        orderData,\n        \"shipped\",\n        trackingNumber,\n      );\n\n      await this.transporter.sendMail({\n        from: `\"Kiti Locks\" <${process.env.NODE_MAILER_EMAIL || \"noreply@bathroomhardware.com\"}>`,\n        to: orderData.customerEmail,\n        subject,\n        html,\n      });\n\n      console.log(\n        `Order shipped email sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n      );\n    } catch (error) {\n      console.error(\"Failed to send order shipped email:\", error);\n    }\n  }\n\n  async sendOrderDelivered(orderData: OrderEmailData): Promise<void> {\n    try {\n      const { subject, html } = this.generateOrderEmailTemplate(\n        orderData,\n        \"delivered\",\n      );\n\n      await this.transporter.sendMail({\n        from: `\"Kiti Locks\" <${process.env.NODE_MAILER_EMAIL || \"noreply@bathroomhardware.com\"}>`,\n        to: orderData.customerEmail,\n        subject,\n        html,\n      });\n\n      console.log(\n        `Order delivered email sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n      );\n    } catch (error) {\n      console.error(\"Failed to send order delivered email:\", error);\n    }\n  }\n}\n\n// Mock email service for development/testing\nclass MockEmailService implements EmailService {\n  async sendOrderConfirmation(orderData: OrderEmailData): Promise<void> {\n    console.log(\n      `[MOCK EMAIL] Order confirmation sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n    );\n    console.log(\"Order data:\", JSON.stringify(orderData, null, 2));\n  }\n\n  async sendOrderShipped(\n    orderData: OrderEmailData,\n    trackingNumber?: string,\n  ): Promise<void> {\n    console.log(\n      `[MOCK EMAIL] Order shipped notification sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n    );\n    if (trackingNumber) {\n      console.log(`Tracking number: ${trackingNumber}`);\n    }\n  }\n\n  async sendOrderDelivered(orderData: OrderEmailData): Promise<void> {\n    console.log(\n      `[MOCK EMAIL] Order delivered notification sent to ${orderData.customerEmail} for order ${orderData.orderId}`,\n    );\n  }\n}\n\n// Export the service based on environment\nconst emailService: EmailService =\n  process.env.NODE_ENV === \"production\" &&\n  process.env.NODE_MAILER_EMAIL &&\n  process.env.NODE_MAILER_PASS\n    ? new NodemailerEmailService()\n    : new MockEmailService();\n\nexport default emailService;\nexport type { OrderEmailData };\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport Order from \"../models/Order\";\nimport User from \"../models/User\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n} from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\nimport emailService from \"../services/emailService\";\n\nconst router = Router();\n\n// Create order after successful payment\nrouter.post(\n  \"/create\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { \n        paymentStatus = \"pending\",\n        paymentIntentId,\n        status = \"pending\",\n        items = [], \n        shippingAddress,\n        subtotal,\n        tax = 0,\n        shipping = 0,\n        total\n      } = req.body;\n      const userId = (req as AuthRequest).user?.userId;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      if (!paymentIntentId || !items || !shippingAddress) {\n        res.status(400).json({ error: \"Missing required order information\" });\n        return;\n      }\n\n      // Generate order number\n      const orderNumber = `ORD-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n\n      // Create order\n      const order = new Order({\n        orderNumber,\n        user: (req as AuthRequest).user?.userId,\n        items: items.map((item: any) => ({\n          product: item.productId,\n          name: item.name,\n          price: item.price,\n          quantity: item.quantity,\n          image: item.image || \"/placeholder.svg\",\n        })),\n        subtotal: subtotal || 0,\n        tax: tax || 0,\n        shipping: shipping || 0,\n        total: total || subtotal || 0,\n        status,\n        paymentStatus,\n        paymentMethod: \"stripe\",\n        paymentIntentId,\n        shippingAddress: {\n          type: \"shipping\",\n          firstName: shippingAddress.firstName,\n          lastName: shippingAddress.lastName,\n          address1: shippingAddress.address,\n          city: shippingAddress.city,\n          state: shippingAddress.state,\n          zipCode: shippingAddress.zipCode,\n          country: shippingAddress.country || \"US\",\n          isDefault: false,\n        },\n        billingAddress: {\n          type: \"billing\",\n          firstName: shippingAddress.firstName,\n          lastName: shippingAddress.lastName,\n          address1: shippingAddress.address,\n          city: shippingAddress.city,\n          state: shippingAddress.state,\n          zipCode: shippingAddress.zipCode,\n          country: shippingAddress.country || \"US\",\n          isDefault: false,\n        },\n      });\n\n      await order.save();\n\n      // Send confirmation email (optional - will handle errors gracefully)\n      try {\n        await emailService.sendOrderConfirmation({\n          orderId: order.orderNumber,\n          customerName: `${shippingAddress.firstName} ${shippingAddress.lastName}`,\n          customerEmail: shippingAddress.email,\n          items: items.map((item: any) => ({\n            name: item.name,\n            quantity: item.quantity,\n            price: item.price,\n          })),\n          totalAmount: total,\n          shippingAddress: {\n            firstName: shippingAddress.firstName,\n            lastName: shippingAddress.lastName,\n            address: shippingAddress.address,\n            city: shippingAddress.city,\n            state: shippingAddress.state,\n            zipCode: shippingAddress.zipCode,\n            country: shippingAddress.country || \"US\",\n          },\n        });\n      } catch (emailError) {\n        console.warn(\"Failed to send confirmation email:\", emailError);\n        // Don't fail the order creation if email fails\n      }\n\n      res.status(201).json({\n        message: \"Order created successfully\",\n        order: {\n          _id: order._id,\n          orderNumber: order.orderNumber,\n          total: order.total,\n          status: order.status,\n          paymentStatus: order.paymentStatus,\n          createdAt: order.createdAt,\n        },\n      });\n    } catch (error) {\n      console.error(\"Create order error:\", error);\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  },\n);\n\n// Get all orders (admin only)\nrouter.get(\n  \"/\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const orders = await Order.find()\n        .populate(\"user\", \"name email\")\n        .populate(\"items.product\", \"name price\")\n        .sort({ createdAt: -1 })\n        .select('-__v');\n\n      res.json({ orders });\n    } catch (error) {\n      console.error(\"Get orders error:\", error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  },\n);\n\n// Track order by order number (for users)\nrouter.get(\n  \"/track/:orderNumber\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { orderNumber } = req.params;\n      const userId = (req as AuthRequest).user?.userId;\n\n      if (!userId) {\n        res.status(401).json({ error: \"User not authenticated\" });\n        return;\n      }\n\n      // Find order by order number and ensure it belongs to the authenticated user\n      const order = await Order.findOne({\n        orderNumber,\n        userId,\n      }).populate(\"userId\", \"name email\");\n\n      if (!order) {\n        res.status(404).json({ error: \"Order not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Order tracking information retrieved successfully\",\n        order: {\n          id: order._id,\n          orderNumber: order.orderNumber,\n          status: order.status,\n          paymentStatus: order.paymentStatus,\n          total: order.total,\n          items: order.items,\n          shippingAddress: order.shippingAddress,\n          createdAt: order.createdAt,\n          updatedAt: order.updatedAt,\n          // Include Shiprocket fields if available\n          shipment_id: order.shipment_id,\n          awb_code: order.awb_code,\n          courier_company_id: order.courier_company_id,\n          shiprocket_tracking_url: order.shiprocket_tracking_url,\n          order_created_on_shiprocket: order.order_created_on_shiprocket,\n        },\n      });\n    } catch (error) {\n      console.error(\"Track order error:\", error);\n      res.status(500).json({ error: \"Failed to retrieve order tracking information\" });\n    }\n  },\n);\n\n// Get user's orders\nrouter.get(\n  \"/my\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const orders = await Order.find({ user: (req as AuthRequest).user?.userId })\n        .populate(\"items.product\", \"name price images\")\n        .sort({ createdAt: -1 })\n        .select(\"-__v\");\n\n      res.json({ orders });\n    } catch (error) {\n      console.error(\"Get user orders error:\", error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  },\n);\n\n// Get user's orders (must be above /:orderId)\nrouter.get(\n  \"/my-orders\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const userId = (req as AuthRequest).user!.id;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const orders = await Order.find({ user: userId })\n        .populate(\"items.product\", \"name price\")\n        .sort({ createdAt: -1 })\n        .select('-__v');\n\n      res.json({ orders });\n    } catch (error) {\n      console.error(\"Error fetching user orders:\", error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  },\n);\n\n// Get single order (must be after all specific routes)\nrouter.get(\n  \"/:orderId\",\n  authenticateToken,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { orderId } = req.params;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const order = await Order.findById(orderId)\n        .populate(\"user\", \"name email\")\n        .populate(\"items.product\", \"name price images\")\n        .select('-__v');\n\n      if (!order) {\n        res.status(404).json({ error: \"Order not found\" });\n        return;\n      }\n\n      // Check if user owns this order or is admin\n      if (\n        (req as AuthRequest).user?.role !== \"admin\" &&\n        order.user._id.toString() !== (req as AuthRequest).user?.userId\n      ) {\n        res.status(403).json({ error: \"Access denied\" });\n        return;\n      }\n\n      res.json({ order });\n    } catch (error) {\n      console.error(\"Get order error:\", error);\n      res.status(500).json({ error: \"Failed to fetch order\" });\n    }\n  },\n);\n\n// Update order status (admin only)\nrouter.put(\n  \"/:orderId/status\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { orderId } = req.params;\n      const { status, trackingNumber, trackingUrl, estimatedDelivery, notes } = req.body;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const validStatuses = [\n        \"pending\",\n        \"confirmed\",\n        \"processing\",\n        \"shipped\",\n        \"delivered\",\n      ];\n\n      if (!validStatuses.includes(status)) {\n        res.status(400).json({ error: \"Invalid status\" });\n        return;\n      }\n\n      const updateData: any = {\n        status,\n        ...(status === \"shipped\" && { shippedAt: new Date() }),\n        ...(status === \"delivered\" && { deliveredAt: new Date() }),\n        ...(trackingNumber && { trackingNumber }),\n        ...(trackingUrl && { trackingUrl }),\n        ...(estimatedDelivery && { estimatedDelivery: new Date(estimatedDelivery) }),\n        ...(notes && { notes }),\n      };\n\n      const order = await Order.findByIdAndUpdate(\n        orderId,\n        updateData,\n        { new: true },\n      ).populate(\"user\", \"name email\");\n\n      if (!order) {\n        res.status(404).json({ error: \"Order not found\" });\n        return;\n      }\n\n      // Send email notifications for specific status changes\n      try {\n        if (order.user && (status === \"shipped\" || status === \"delivered\")) {\n          const emailData = {\n            orderId: order.orderNumber,\n            customerName: (order.user as any).name || \"Customer\",\n            customerEmail: (order.user as any).email,\n            items: order.items.map((item: any) => ({\n              name: item.name,\n              quantity: item.quantity,\n              price: item.price,\n            })),\n            totalAmount: order.total,\n            shippingAddress: order.shippingAddress,\n            ...(trackingNumber && { trackingNumber }),\n            ...(trackingUrl && { trackingUrl }),\n          };\n\n          if (status === \"shipped\") {\n            await emailService.sendOrderShipped(emailData);\n          } else if (status === \"delivered\") {\n            await emailService.sendOrderDelivered(emailData);\n          }\n        }\n      } catch (emailError) {\n        console.error(\"Failed to send status update email:\", emailError);\n        // Don't fail the status update if email fails\n      }\n\n      res.json({\n        message: \"Order status updated successfully\",\n        order,\n      });\n    } catch (error) {\n      console.error(\"Update order status error:\", error);\n      res.status(500).json({ error: \"Failed to update order status\" });\n    }\n  },\n);\n\n// Update order tracking information (admin only)\nrouter.put(\n  \"/:orderId/tracking\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { orderId } = req.params;\n      const { trackingNumber, trackingUrl, estimatedDelivery, notes } = req.body;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const updateData: any = {};\n      if (trackingNumber) updateData.trackingNumber = trackingNumber;\n      if (trackingUrl) updateData.trackingUrl = trackingUrl;\n      if (estimatedDelivery) updateData.estimatedDelivery = new Date(estimatedDelivery);\n      if (notes !== undefined) updateData.notes = notes;\n\n      const order = await Order.findByIdAndUpdate(\n        orderId,\n        updateData,\n        { new: true },\n      ).populate(\"user\", \"name email\");\n\n      if (!order) {\n        res.status(404).json({ error: \"Order not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"Order tracking information updated successfully\",\n        order,\n      });\n    } catch (error) {\n      console.error(\"Update order tracking error:\", error);\n      res.status(500).json({ error: \"Failed to update order tracking\" });\n    }\n  },\n);\n\n// Get single order details (admin only)\nrouter.get(\n  \"/:orderId\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { orderId } = req.params;\n\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const order = await Order.findById(orderId)\n        .populate(\"user\", \"name email phone\")\n        .populate(\"items.product\", \"name price images slug\")\n        .select(\"-__v\");\n\n      if (!order) {\n        res.status(404).json({ error: \"Order not found\" });\n        return;\n      }\n\n      res.json({ order });\n    } catch (error) {\n      console.error(\"Get order details error:\", error);\n      res.status(500).json({ error: \"Failed to fetch order details\" });\n    }\n  },\n);\n\n// Get order analytics (admin only)\nrouter.get(\n  \"/analytics\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      // Get order statistics\n      const totalOrders = await Order.countDocuments();\n      const totalRevenue = await Order.aggregate([\n        { $match: { paymentStatus: \"paid\" } },\n        { $group: { _id: null, total: { $sum: \"$total\" } } }\n      ]);\n\n      // Get orders by status\n      const ordersByStatus = await Order.aggregate([\n        { $group: { _id: \"$status\", count: { $sum: 1 } } }\n      ]);\n\n      // Get recent orders\n      const recentOrders = await Order.find()\n        .populate(\"user\", \"name email\")\n        .sort({ createdAt: -1 })\n        .limit(10)\n        .select(\"orderNumber total status createdAt user\");\n\n      // Get orders by month (last 6 months)\n      const sixMonthsAgo = new Date();\n      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);\n\n      const ordersByMonth = await Order.aggregate([\n        { $match: { createdAt: { $gte: sixMonthsAgo } } },\n        {\n          $group: {\n            _id: {\n              year: { $year: \"$createdAt\" },\n              month: { $month: \"$createdAt\" }\n            },\n            count: { $sum: 1 },\n            revenue: { $sum: \"$total\" }\n          }\n        },\n        { $sort: { \"_id.year\": 1, \"_id.month\": 1 } }\n      ]);\n\n      res.json({\n        totalOrders,\n        totalRevenue: totalRevenue[0]?.total || 0,\n        ordersByStatus,\n        recentOrders,\n        ordersByMonth\n      });\n    } catch (error) {\n      console.error(\"Get order analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch order analytics\" });\n    }\n  },\n);\n\nexport default router;\n","import axios from 'axios';\n\ninterface ShiprocketLoginResponse {\n  token: string;\n  [key: string]: any;\n}\n\nlet cachedToken: string | null = null;\nlet tokenExpiry: Date | null = null;\nlet lastLoginAttempt: Date | null = null;\nlet loginAttemptCount = 0;\nlet isRateLimited = false;\nlet rateLimitResetTime: Date | null = null;\nlet consecutiveFailures = 0;\n\n/**\n * Get Shiprocket authentication token with improved error handling\n * Caches token to avoid repeated login calls\n */\nexport const getShiprocketToken = async (): Promise<string> => {\n  try {\n    // Check if we're currently rate limited\n    if (isRateLimited && rateLimitResetTime && new Date() < rateLimitResetTime) {\n      const minutesLeft = Math.ceil((rateLimitResetTime.getTime() - Date.now()) / (1000 * 60));\n      throw new Error(`Shiprocket API is rate limited. Please try again in ${minutesLeft} minutes.`);\n    }\n\n    // Check if we have a valid cached token\n    if (cachedToken && tokenExpiry && new Date() < tokenExpiry) {\n      console.log('✅ Using cached Shiprocket token');\n      return cachedToken;\n    }\n\n    const email = process.env.SHIPROCKET_EMAIL;\n    const password = process.env.SHIPROCKET_PASSWORD;\n    const nodeEnv = process.env.NODE_ENV;\n\n    if (!email || !password) {\n      console.warn('⚠️ Shiprocket credentials not found in environment variables');\n      console.warn('Please set SHIPROCKET_EMAIL and SHIPROCKET_PASSWORD in your .env file');\n      \n      // In development, use mock token if credentials are missing\n      if (nodeEnv === 'development') {\n        console.warn('⚠️ Development mode: Using mock Shiprocket token due to missing credentials');\n        cachedToken = 'mock_token_for_development';\n        tokenExpiry = new Date(Date.now() + 23 * 60 * 60 * 1000);\n        return cachedToken;\n      }\n      \n      throw new Error('Shiprocket credentials not found in environment variables');\n    }\n\n    // Enhanced rate limiting with exponential backoff\n    if (lastLoginAttempt) {\n      const timeSinceLastAttempt = Date.now() - lastLoginAttempt.getTime();\n      const minInterval = Math.min(60000 * Math.pow(2, consecutiveFailures), 300000); // Max 5 minutes\n      \n      if (timeSinceLastAttempt < minInterval) {\n        const secondsLeft = Math.ceil((minInterval - timeSinceLastAttempt) / 1000);\n        throw new Error(`Rate limited: Please wait ${secondsLeft} seconds before making another Shiprocket login attempt`);\n      }\n    }\n\n    // Development bypass - use mock data if too many attempts or consecutive failures\n    if (nodeEnv === 'development' && (loginAttemptCount > 3 || consecutiveFailures > 2)) {\n      console.warn('⚠️ Development mode: Using mock Shiprocket token due to rate limiting or consecutive failures');\n      cachedToken = 'mock_token_for_development';\n      tokenExpiry = new Date(Date.now() + 23 * 60 * 60 * 1000);\n      return cachedToken;\n    }\n\n    console.log('🔑 Attempting Shiprocket authentication...');\n    lastLoginAttempt = new Date();\n    loginAttemptCount++;\n\n    const loginData = {\n      email: email,\n      password: password\n    };\n\n    const response = await axios.post<ShiprocketLoginResponse>(\n      'https://apiv2.shiprocket.in/v1/external/auth/login',\n      loginData,\n      {\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': 'BuilderCurry/1.0'\n        },\n        timeout: 15000 // Increased timeout to 15 seconds\n      }\n    );\n\n    if (response.data && response.data.token) {\n      cachedToken = response.data.token;\n      // Set token expiry to 23 hours from now (tokens typically expire in 24 hours)\n      tokenExpiry = new Date(Date.now() + 23 * 60 * 60 * 1000);\n      \n      // Reset all failure counters on successful login\n      isRateLimited = false;\n      rateLimitResetTime = null;\n      loginAttemptCount = 0;\n      consecutiveFailures = 0;\n      \n      console.log('✅ Shiprocket token obtained successfully');\n      return cachedToken;\n    } else {\n      throw new Error('Invalid response from Shiprocket login API');\n    }\n  } catch (error: any) {\n    console.error('❌ Shiprocket authentication failed:', error.message);\n    \n    // Increment failure counters\n    consecutiveFailures++;\n    \n    // Clear cached token on error\n    cachedToken = null;\n    tokenExpiry = null;\n    \n    if (error.response) {\n      const status = error.response.status;\n      const errorMessage = error.response.data?.message || error.response.statusText;\n      \n      if (status === 403) {\n        // Handle 403 errors specifically\n        if (errorMessage.includes('permission') || errorMessage.includes('Unauthorized')) {\n          throw new Error(`Shiprocket API Permission Error: ${errorMessage}. Please contact Shiprocket support to enable API permissions for your account.`);\n        } else {\n          throw new Error(`Shiprocket login failed: Invalid credentials or account not activated. Please verify your Shiprocket account credentials.`);\n        }\n      } else if (status === 429) {\n        // Handle rate limiting\n        isRateLimited = true;\n        rateLimitResetTime = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes\n        throw new Error(`Shiprocket API rate limited. Please try again in 5 minutes.`);\n      } else if (status === 401) {\n        throw new Error(`Shiprocket login failed: Invalid credentials. Please check your email and password.`);\n      } else {\n        throw new Error(`Shiprocket login failed: ${errorMessage} (Status: ${status})`);\n      }\n    } else if (error.request) {\n      throw new Error('Unable to connect to Shiprocket API. Please check your internet connection.');\n    } else {\n      throw new Error(`Shiprocket authentication error: ${error.message}`);\n    }\n  }\n};\n\n/**\n * Clear cached token (useful for forced re-authentication)\n */\nexport const clearShiprocketToken = (): void => {\n  cachedToken = null;\n  tokenExpiry = null;\n  consecutiveFailures = 0;\n  isRateLimited = false;\n  rateLimitResetTime = null;\n};\n\n/**\n * Make authenticated request to Shiprocket API with enhanced error handling\n */\nexport const makeShiprocketRequest = async (method: string, url: string, data: any = null): Promise<any> => {\n  try {\n    const token = await getShiprocketToken();\n    \n    const config: any = {\n      method: method,\n      url: url,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`,\n        'User-Agent': 'BuilderCurry/1.0'\n      },\n      timeout: 15000\n    };\n\n    if (data) {\n      config.data = data;\n    }\n\n    const response = await axios(config);\n    return response.data;\n  } catch (error: any) {\n    // Handle specific permission errors\n    if (error.response && error.response.status === 403) {\n      const errorMessage = error.response.data?.message || 'Permission denied';\n      \n      // Check if it's a permission issue and provide helpful guidance\n      if (errorMessage.includes('permission') || errorMessage.includes('Unauthorized')) {\n        throw new Error(`Shiprocket API Permission Error: ${errorMessage}. Please contact Shiprocket support to enable API permissions for your account.`);\n      }\n    }\n    \n    // If token expired, try once more with fresh token\n    if (error.response && error.response.status === 401) {\n      clearShiprocketToken();\n      const token = await getShiprocketToken();\n      \n      const config: any = {\n        method: method,\n        url: url,\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`,\n          'User-Agent': 'BuilderCurry/1.0'\n        },\n        timeout: 15000\n      };\n\n      if (data) {\n        config.data = data;\n      }\n\n      const response = await axios(config);\n      return response.data;\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Create Shiprocket order from local order data with enhanced error handling\n */\nexport const createShiprocketOrder = async (orderData: {\n  order_id: string;\n  customer_name: string;\n  customer_email: string;\n  customer_phone: string;\n  shipping_address: {\n    address: string;\n    city: string;\n    state: string;\n    pincode: string;\n    country: string;\n  };\n  items: Array<{\n    name: string;\n    sku: string;\n    units: number;\n    selling_price: number;\n    weight?: number;\n  }>;\n  payment_method: 'COD' | 'Prepaid';\n  sub_total: number;\n  length?: number;\n  breadth?: number;\n  height?: number;\n  weight?: number;\n  // Additional optional fields\n  pickup_location?: string;\n  comment?: string;\n  reseller_name?: string;\n  company_name?: string;\n  billing_isd_code?: string;\n  order_type?: string;\n  billing_address_2?: string;\n  shipping_address_2?: string;\n}): Promise<any> => {\n  try {\n    const payload = {\n      order_id: orderData.order_id,\n      order_date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n      pickup_location: orderData.pickup_location || \"Primary\", // Default pickup location\n      channel_id: \"\", // Can be left empty for marketplace integration\n      comment: orderData.comment || \"Order created via website\",\n      reseller_name: orderData.reseller_name || \"KHUNTIA ENTERPRISES PRIVATE LIMITED\",\n      company_name: orderData.company_name || \"Kiti locks\",\n      billing_customer_name: orderData.customer_name,\n      billing_last_name: \"\",\n      billing_address: orderData.shipping_address.address,\n      billing_address_2: orderData.billing_address_2 || \"\",\n      billing_isd_code: orderData.billing_isd_code || \"91\",\n      billing_city: orderData.shipping_address.city,\n      billing_pincode: orderData.shipping_address.pincode,\n      billing_state: orderData.shipping_address.state,\n      billing_country: orderData.shipping_address.country,\n      billing_email: orderData.customer_email,\n      billing_phone: orderData.customer_phone,\n      shipping_is_billing: true,\n      shipping_customer_name: orderData.customer_name,\n      shipping_last_name: \"\",\n      shipping_address: orderData.shipping_address.address,\n      shipping_address_2: orderData.shipping_address_2 || \"\",\n      shipping_city: orderData.shipping_address.city,\n      shipping_pincode: orderData.shipping_address.pincode,\n      shipping_country: orderData.shipping_address.country,\n      shipping_state: orderData.shipping_address.state,\n      shipping_email: orderData.customer_email,\n      shipping_phone: orderData.customer_phone,\n      order_items: orderData.items.map(item => ({\n        name: item.name,\n        sku: item.sku,\n        units: item.units,\n        selling_price: item.selling_price,\n        discount: \"\",\n        tax: \"\",\n        hsn: 441122, // Default HSN code for hardware items\n        weight: item.weight || 0.1, // Default weight if not provided\n        dimensions: \"10,10,10\" // Default dimensions\n      })),\n      payment_method: orderData.payment_method,\n      shipping_charges: 0,\n      giftwrap_charges: 0,\n      transaction_charges: 0,\n      total_discount: 0,\n      sub_total: orderData.sub_total,\n      length: orderData.length || 10,\n      breadth: orderData.breadth || 10,\n      height: orderData.height || 10,\n      weight: orderData.weight || 0.5,\n      order_type: orderData.order_type || \"ESSENTIALS\"\n    };\n\n    const response = await makeShiprocketRequest(\n      'POST',\n      'https://apiv2.shiprocket.in/v1/external/orders/create/adhoc',\n      payload\n    );\n\n    console.log('✅ Shiprocket order created successfully:', response);\n    return response;\n  } catch (error: any) {\n    console.error('❌ Failed to create Shiprocket order:', error);\n    \n    // Provide specific guidance for common errors\n    if (error.message.includes('Permission Error')) {\n      throw new Error(`Shiprocket API Permission Issue: ${error.message}. Please contact Shiprocket support to enable order creation permissions.`);\n    }\n    \n    throw error;\n  }\n};\n\n/**\n * Create Shiprocket order with default company settings\n */\nexport const createShiprocketOrderWithDefaults = async (orderData: {\n  order_id: string;\n  customer_name: string;\n  customer_email: string;\n  customer_phone: string;\n  shipping_address: {\n    address: string;\n    city: string;\n    state: string;\n    pincode: string;\n    country: string;\n  };\n  items: Array<{\n    name: string;\n    sku: string;\n    units: number;\n    selling_price: number;\n    weight?: number;\n  }>;\n  payment_method: 'COD' | 'Prepaid';\n  sub_total: number;\n  length?: number;\n  breadth?: number;\n  height?: number;\n  weight?: number;\n  comment?: string;\n}): Promise<any> => {\n  return createShiprocketOrder({\n    ...orderData,\n    pickup_location: \"Primary\",\n    reseller_name: \"KHUNTIA ENTERPRISES PRIVATE LIMITED\",\n    company_name: \"Kiti locks\",\n    billing_isd_code: \"91\",\n    order_type: \"ESSENTIALS\",\n    comment: orderData.comment || \"Order created via website\"\n  });\n};\n\n/**\n * Check if Shiprocket API is accessible and has required permissions\n */\nexport const checkShiprocketPermissions = async (): Promise<{\n  canCreateOrders: boolean;\n  canTrackOrders: boolean;\n  canCancelOrders: boolean;\n  error?: string;\n}> => {\n  try {\n    const token = await getShiprocketToken();\n    \n    // Test basic API access\n    const testResponse = await axios.get(\n      'https://apiv2.shiprocket.in/v1/external/courier/serviceability/',\n      {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        params: {\n          pickup_postcode: '110001',\n          delivery_postcode: '400001',\n          weight: 0.5,\n          cod: 0\n        }\n      }\n    );\n    \n    return {\n      canCreateOrders: true,\n      canTrackOrders: true,\n      canCancelOrders: true\n    };\n  } catch (error: any) {\n    if (error.response && error.response.status === 403) {\n      return {\n        canCreateOrders: false,\n        canTrackOrders: false,\n        canCancelOrders: false,\n        error: 'Shiprocket account does not have API permissions. Please contact Shiprocket support.'\n      };\n    }\n    \n    return {\n      canCreateOrders: false,\n      canTrackOrders: false,\n      canCancelOrders: false,\n      error: error.message\n    };\n  }\n};\n","import express, { Request, Response } from \"express\";\nimport Razorpay from \"razorpay\";\nimport crypto from \"crypto\";\nimport mongoose from \"mongoose\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport Order from \"../models/Order\";\nimport User from \"../models/User\";\nimport Product from \"../models/Product\";\nimport emailService from \"../services/emailService\";\nimport { createShiprocketOrderWithDefaults } from \"../utils/shiprocketAuth\";\n\nconst router = express.Router();\n\n// Declare global type for demo sessions\ndeclare global {\n  var demoSessions: Map<string, any> | undefined;\n}\n\n// Initialize Razorpay with the provided keys\nlet razorpay: Razorpay | null = null;\nconst razorpayKeyId = process.env.RAZORPAY_KEY_ID;\nconst razorpayKeySecret = process.env.RAZORPAY_KEY_SECRET;\n\nconsole.log(\"Razorpay initialization:\", {\n  keyIdProvided: !!razorpayKeyId,\n  keySecretProvided: !!razorpayKeySecret,\n  keyIdPrefix: razorpayKeyId?.substring(0, 8),\n});\n\n// Initialize Razorpay\ntry {\n  if (razorpayKeyId && razorpayKeySecret) {\n    razorpay = new Razorpay({\n      key_id: razorpayKeyId,\n      key_secret: razorpayKeySecret,\n    });\n    console.log(\"✅ Razorpay initialized successfully\");\n  } else {\n    console.warn(\"⚠️ Razorpay keys not provided, running in demo mode\");\n    console.log(\"Missing keys:\", {\n      RAZORPAY_KEY_ID: !razorpayKeyId,\n      RAZORPAY_KEY_SECRET: !razorpayKeySecret,\n    });\n  }\n} catch (error) {\n  console.error(\"❌ Razorpay initialization failed:\", error);\n  razorpay = null;\n}\n\n// Create Razorpay order - requires authentication\nrouter.post(\"/create-razorpay-order\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { items, currency = \"INR\" } = req.body;\n    const userId = (req as AuthRequest).user?.userId;\n\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      return res.status(400).json({ error: \"Cart items are required\" });\n    }\n\n    if (!razorpay) {\n      return res.status(503).json({ error: \"Payment service not available\" });\n    }\n\n    // Calculate total amount from actual product prices (server-side validation)\n    let totalAmount = 0;\n    const validatedItems = [];\n\n    for (const item of items) {\n      if (!item.productId || !item.quantity || item.quantity <= 0) {\n        return res.status(400).json({ error: \"Each item must have a valid productId and quantity\" });\n      }\n\n      const product = await Product.findById(item.productId);\n      if (!product) {\n        return res.status(400).json({ error: `Product ${item.productId} not found` });\n      }\n\n      const itemTotal = product.price * item.quantity;\n      totalAmount += itemTotal;\n\n      validatedItems.push({\n        productId: product._id,\n        name: product.name,\n        price: product.price,\n        quantity: item.quantity,\n        total: itemTotal\n      });\n    }\n\n    // No tax added - just product prices\n    const finalAmount = Math.round(totalAmount * 100); // Convert to paise\n\n    // Create Razorpay order\n    const options = {\n      amount: finalAmount,\n      currency: currency.toUpperCase(),\n      receipt: `receipt_${Date.now()}`,\n      payment_capture: 1,\n    };\n\n    const order = await razorpay.orders.create(options);\n\n    res.json({\n      orderId: order.id,\n      amount: order.amount,\n      currency: order.currency,\n      keyId: razorpayKeyId,\n      validatedItems,\n      totalAmount: totalAmount, // Amount in rupees (without tax)\n    });\n  } catch (error) {\n    console.error(\"Error creating Razorpay order:\", error);\n    res.status(500).json({ error: \"Failed to create payment order\" });\n  }\n});\n\n// Create checkout session - calculates amounts server-side\nrouter.post(\"/create-session\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { items, shippingAddress } = req.body;\n    const userId = (req as AuthRequest).user?.userId;\n\n    if (!items || !Array.isArray(items) || items.length === 0) {\n      res.status(400).json({ error: \"Cart items are required\" });\n      return;\n    }\n\n    if (!razorpay) {\n      res.status(503).json({ error: \"Payment service not available\" });\n      return;\n    }\n\n    // Calculate total amount from actual product prices (server-side validation)\n    let totalAmount = 0;\n    const validatedItems = [];\n\n    for (const item of items) {\n      if (!item.productId || !item.quantity || item.quantity <= 0) {\n        return res.status(400).json({ error: \"Each item must have a valid productId and quantity\" });\n      }\n\n      const product = await Product.findById(item.productId);\n      if (!product) {\n        return res.status(400).json({ error: `Product ${item.productId} not found` });\n      }\n\n      const itemTotal = product.price * item.quantity;\n      totalAmount += itemTotal;\n\n      validatedItems.push({\n        productId: product._id,\n        name: product.name,\n        price: product.price,\n        quantity: item.quantity,\n        total: itemTotal\n      });\n    }\n\n    // No tax added - just product prices\n    const finalAmount = Math.round(totalAmount * 100); // Convert to paise\n\n    // Create Razorpay order\n    const options = {\n      amount: finalAmount,\n      currency: \"INR\",\n      receipt: `receipt_${Date.now()}`,\n      payment_capture: 1,\n    };\n\n    const order = await razorpay.orders.create(options);\n\n    res.json({\n      orderId: order.id,\n      amount: order.amount,\n      currency: order.currency,\n      keyId: razorpayKeyId,\n      validatedItems,\n      totalAmount: totalAmount, // Amount in rupees (without tax)\n      isDemoMode: false\n    });\n  } catch (error) {\n    console.error(\"Error creating checkout session:\", error);\n    res.status(500).json({ error: \"Failed to create checkout session\" });\n  }\n});\n\n// Verify Razorpay payment - requires authentication\nrouter.post(\"/verify-razorpay-payment\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;\n    const userId = (req as AuthRequest).user?.userId;\n\n    if (!razorpay_order_id || !razorpay_payment_id || !razorpay_signature) {\n      return res.status(400).json({ error: \"Missing payment verification data\" });\n    }\n\n    if (!razorpayKeySecret) {\n      return res.status(500).json({ error: \"Payment verification not available\" });\n    }\n\n    // Verify signature\n    const body = razorpay_order_id + \"|\" + razorpay_payment_id;\n    const expectedSignature = crypto\n      .createHmac(\"sha256\", razorpayKeySecret)\n      .update(body.toString())\n      .digest(\"hex\");\n\n    const isAuthentic = expectedSignature === razorpay_signature;\n\n    if (isAuthentic) {\n      res.json({\n        success: true,\n        message: \"Payment verified successfully\",\n        paymentId: razorpay_payment_id,\n        orderId: razorpay_order_id,\n      });\n    } else {\n      res.status(400).json({ error: \"Invalid payment signature\" });\n    }\n  } catch (error) {\n    console.error(\"Error verifying payment:\", error);\n    res.status(500).json({ error: \"Payment verification failed\" });\n  }\n});\n\n// Handle successful Razorpay payment\nrouter.post(\"/razorpay-success\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { \n      razorpay_payment_id, \n      razorpay_order_id, \n      razorpay_signature,\n      orderId,\n      items,\n      orderItems,\n      shippingAddress\n    } = req.body;\n    const userId = (req as AuthRequest).user?.userId;\n\n    console.log(\"🔍 Razorpay success payload received:\", {\n      razorpay_payment_id: !!razorpay_payment_id,\n      razorpay_order_id: !!razorpay_order_id,\n      razorpay_signature: !!razorpay_signature,\n      orderId: !!orderId,\n      itemsCount: items?.length || 0,\n      orderItemsCount: orderItems?.length || 0,\n      shippingAddress: shippingAddress ? Object.keys(shippingAddress) : 'undefined',\n      userId: userId || 'guest'\n    });\n\n    // Use orderItems if available, fallback to items\n    const finalItems = orderItems || items || [];\n    \n    console.log(\"📦 Final items for processing:\", {\n      finalItemsCount: finalItems.length,\n      sampleItem: finalItems[0] || \"none\",\n      allItemKeys: finalItems.length > 0 ? Object.keys(finalItems[0] || {}) : []\n    });\n\n    if (!razorpay_payment_id || !razorpay_order_id || !razorpay_signature) {\n      return res.status(400).json({ error: \"Missing payment details\" });\n    }\n\n    // Verify payment signature\n    if (!razorpayKeySecret) {\n      return res.status(500).json({ error: \"Payment verification not available\" });\n    }\n\n    const body = razorpay_order_id + \"|\" + razorpay_payment_id;\n    const expectedSignature = crypto\n      .createHmac(\"sha256\", razorpayKeySecret)\n      .update(body.toString())\n      .digest(\"hex\");\n\n    if (expectedSignature !== razorpay_signature) {\n      return res.status(400).json({ error: \"Invalid payment signature\" });\n    }\n\n    // Fetch payment details from Razorpay\n    let paymentDetails;\n    try {\n      paymentDetails = await razorpay!.payments.fetch(razorpay_payment_id);\n    } catch (error) {\n      console.error(\"Error fetching payment details:\", error);\n      return res.status(500).json({ error: \"Failed to verify payment\" });\n    }\n\n    // Use items and shippingAddress from request body, or default values\n    const orderItemsArray = finalItems || [];\n    \n    // Ensure address objects have all required fields with defaults\n    const ensureAddressDefaults = (address: any, type: 'shipping' | 'billing') => ({\n      type,\n      firstName: address?.firstName || \"Guest\",\n      lastName: address?.lastName || \"User\", \n      email: address?.email || \"guest@example.com\",\n      phone: address?.phone || \"9876543210\",\n      address1: address?.address1 || address?.address || \"Default Address\",\n      city: address?.city || \"Default City\",\n      state: address?.state || \"Default State\",\n      zipCode: address?.zipCode || \"000000\",\n      country: address?.country || \"India\",\n      isDefault: false,\n    });\n\n    const orderShippingAddress = ensureAddressDefaults(shippingAddress, 'shipping');\n    const orderBillingAddress = ensureAddressDefaults(shippingAddress, 'billing'); // Use shipping as billing default\n\n    // Recalculate amount from items for additional security validation\n    let calculatedAmount = 0;\n    if (orderItemsArray.length > 0) {\n      for (const item of orderItemsArray) {\n        if (item.productId || item.product) {\n          // Handle both frontend formats: item.product (from orderItems) and item.productId (from items)\n          const productId = item.productId || item.product;\n          const product = await Product.findById(productId);\n          if (product) {\n            calculatedAmount += product.price * (item.quantity || 1);\n          }\n        }\n      }\n    }\n\n    // Create order in database\n    const paymentAmount = Number(paymentDetails.amount) / 100; // Convert from paise\n    \n    // Use calculated amount if available, otherwise use payment amount\n    const finalAmount = calculatedAmount > 0 ? calculatedAmount : paymentAmount;\n    \n    const order = new Order({\n      orderNumber: `ORD-${Date.now()}`,\n      user: userId || new mongoose.Types.ObjectId(), // Use dummy ObjectId for guest users\n      items: orderItemsArray.map((item: any) => ({\n        product: item.productId || item.product || new mongoose.Types.ObjectId(),\n        name: item.name || \"Product\",\n        price: item.price || 0,\n        quantity: item.quantity || 1,\n        image: item.image || \"/placeholder.svg\",\n      })),\n      subtotal: finalAmount, // No tax included\n      tax: 0, // Explicitly no tax\n      shipping: 0, // Explicitly no shipping cost\n      total: finalAmount, // Same as subtotal since no tax/shipping\n      paymentStatus: \"paid\",\n      paymentMethod: \"razorpay\",\n      paymentIntentId: razorpay_payment_id,\n      razorpayOrderId: razorpay_order_id,\n      razorpayPaymentId: razorpay_payment_id,\n      razorpaySignature: razorpay_signature,\n      shippingAddress: orderShippingAddress,\n      billingAddress: orderBillingAddress,\n      status: \"confirmed\",\n    });\n\n    try {\n      console.log(\"💾 Attempting to save order:\", {\n        orderNumber: `ORD-${Date.now()}`,\n        userId: userId || \"guest\",\n        itemsCount: orderItemsArray.length,\n        finalAmount,\n        shippingAddress: orderShippingAddress,\n      });\n\n      await order.save();\n      console.log(\"✅ Order saved successfully:\", order._id);\n\n      // 🚚 Automatically create Shiprocket order after successful payment\n      try {\n        console.log(\"🔗 Creating Shiprocket order for:\", order._id);\n        \n        // Only create Shiprocket order if we have items\n        if (orderItemsArray.length === 0) {\n          console.warn(\"⚠️ No items found in order - skipping Shiprocket order creation\");\n          console.warn(\"Available data:\", { orderItemsArray, finalItems, items, orderItems });\n        } else {\n          const shiprocketOrderData = {\n            order_id: order._id.toString(),\n            customer_name: `${orderShippingAddress.firstName} ${orderShippingAddress.lastName}`.trim() || \"Guest User\",\n            customer_email: userId ? (await User.findById(userId))?.email || \"guest@example.com\" : \"guest@example.com\",\n            customer_phone: orderShippingAddress.phone || \"9876543210\", // Use phone from shipping address\n            shipping_address: {\n              address: orderShippingAddress.address1,\n              city: orderShippingAddress.city,\n              state: orderShippingAddress.state,\n              pincode: orderShippingAddress.zipCode,\n              country: orderShippingAddress.country\n            },\n            items: orderItemsArray.map((item: any) => ({\n              name: item.name || \"Product\",\n              sku: (item.productId || item.product)?.toString() || \"SKU001\",\n              units: item.quantity || 1,\n              selling_price: item.price || 0,\n              weight: 0.5 // Default weight - you can add weight to products\n            })),\n            payment_method: \"Prepaid\" as const, // Since payment is already completed\n            sub_total: finalAmount,\n            comment: `Order ${order.orderNumber} - ${orderShippingAddress.firstName} ${orderShippingAddress.lastName}`\n          };\n\n          console.log(\"📦 Shiprocket order data prepared:\", {\n            order_id: shiprocketOrderData.order_id,\n            itemsCount: shiprocketOrderData.items.length,\n            items: shiprocketOrderData.items,\n            customer_name: shiprocketOrderData.customer_name,\n            sub_total: shiprocketOrderData.sub_total\n          });\n\n          const shiprocketOrder = await createShiprocketOrderWithDefaults(shiprocketOrderData);\n\n          // Update order with Shiprocket data\n          order.shipment_id = shiprocketOrder.shipment_id;\n          order.shiprocket_tracking_url = shiprocketOrder.tracking_url;\n          order.order_created_on_shiprocket = true;\n          await order.save();\n\n          console.log(\"✅ Shiprocket order created successfully:\", {\n            orderId: order._id,\n            shipmentId: shiprocketOrder.shipment_id,\n            trackingUrl: shiprocketOrder.tracking_url\n          });\n        }\n\n      } catch (shiprocketError) {\n        console.error(\"❌ Shiprocket order creation failed:\", shiprocketError);\n        // Don't fail the entire order - just log the error\n        // Order is still saved locally even if Shiprocket fails\n      }\n\n    } catch (saveError) {\n      console.error(\"❌ Order save failed:\", saveError);\n      return res.status(500).json({ \n        error: \"Failed to create order\", \n        details: saveError instanceof Error ? saveError.message : \"Unknown error\"\n      });\n    }\n\n    // Clear user's cart if logged in\n    if (userId) {\n      await User.findByIdAndUpdate(userId, { cart: [] });\n    }\n\n    res.json({\n      success: true,\n      orderId: order._id,\n      orderNumber: order.orderNumber,\n      order: order,\n      paymentId: razorpay_payment_id,\n    });\n  } catch (error) {\n    console.error(\"Razorpay payment success error:\", error);\n    res.status(500).json({ error: \"Failed to process payment\" });\n  }\n});\n\nexport default router;","import mongoose, { Schema, Document, Model } from \"mongoose\";\n\nexport interface IReview extends Document {\n  product: mongoose.Types.ObjectId;\n  user: mongoose.Types.ObjectId;\n  rating: number;\n  title: string;\n  comment: string;\n  verified: boolean; // Whether the user purchased the product\n  helpful: number; // Number of helpful votes\n  helpfulUsers: mongoose.Types.ObjectId[]; // Users who marked as helpful\n  likes: mongoose.Types.ObjectId[]; // Users who liked this review\n  reports: Array<{\n    user: mongoose.Types.ObjectId;\n    reason: string;\n    reportedAt: Date;\n  }>;\n  images?: string[]; // Optional review images\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IReviewModel extends Model<IReview> {\n  calculateAverageRating(productId: mongoose.Types.ObjectId): Promise<{\n    averageRating: number;\n    totalReviews: number;\n    distribution: { [key: number]: number };\n  }>;\n}\n\nconst reviewSchema = new Schema<IReview>(\n  {\n    product: {\n      type: Schema.Types.ObjectId,\n      ref: \"Product\",\n      required: true,\n    },\n    user: {\n      type: Schema.Types.ObjectId,\n      ref: \"User\",\n      required: true,\n    },\n    rating: {\n      type: Number,\n      required: true,\n      min: 1,\n      max: 5,\n    },\n    title: {\n      type: String,\n      required: true,\n      trim: true,\n      maxlength: 100,\n    },\n    comment: {\n      type: String,\n      required: true,\n      trim: true,\n      maxlength: 1000,\n    },\n    verified: {\n      type: Boolean,\n      default: false,\n    },\n    helpful: {\n      type: Number,\n      default: 0,\n    },\n    helpfulUsers: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n      },\n    ],\n    likes: [\n      {\n        type: Schema.Types.ObjectId,\n        ref: \"User\",\n      },\n    ],\n    reports: [\n      {\n        user: {\n          type: Schema.Types.ObjectId,\n          ref: \"User\",\n          required: true,\n        },\n        reason: {\n          type: String,\n          required: true,\n          trim: true,\n        },\n        reportedAt: {\n          type: Date,\n          default: Date.now,\n        },\n      },\n    ],\n    images: [\n      {\n        type: String,\n      },\n    ],\n  },\n  {\n    timestamps: true,\n  },\n);\n\n// Index for efficient querying\nreviewSchema.index({ product: 1, createdAt: -1 });\nreviewSchema.index({ user: 1, product: 1 }, { unique: true }); // One review per user per product\nreviewSchema.index({ rating: 1 });\n\n// Static method to calculate average rating for a product\nreviewSchema.statics.calculateAverageRating = async function (productId) {\n  const stats = await this.aggregate([\n    { $match: { product: productId } },\n    {\n      $group: {\n        _id: \"$product\",\n        averageRating: { $avg: \"$rating\" },\n        totalReviews: { $sum: 1 },\n        ratingDistribution: {\n          $push: \"$rating\",\n        },\n      },\n    },\n  ]);\n\n  if (stats.length > 0) {\n    const { averageRating, totalReviews, ratingDistribution } = stats[0];\n\n    // Calculate rating distribution\n    const distribution = { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 };\n    ratingDistribution.forEach((rating: number) => {\n      distribution[rating as keyof typeof distribution]++;\n    });\n\n    return {\n      averageRating: Math.round(averageRating * 10) / 10,\n      totalReviews,\n      distribution,\n    };\n  }\n\n  return {\n    averageRating: 0,\n    totalReviews: 0,\n    distribution: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 },\n  };\n};\n\n// Update product's rating stats after review changes\nreviewSchema.post(\"save\", async function () {\n  const Review = this.constructor as any;\n  const Product = mongoose.model(\"Product\");\n\n  const stats = await Review.calculateAverageRating(this.product);\n\n  await Product.findByIdAndUpdate(this.product, {\n    averageRating: stats.averageRating,\n    reviewCount: stats.totalReviews,\n    ratingDistribution: stats.distribution,\n  });\n});\n\nreviewSchema.post(\"findOneAndDelete\", async function (doc) {\n  if (doc) {\n    const Review = mongoose.model(\"Review\") as IReviewModel;\n    const Product = mongoose.model(\"Product\");\n\n    const stats = await Review.calculateAverageRating(doc.product);\n\n    await Product.findByIdAndUpdate(doc.product, {\n      averageRating: stats.averageRating,\n      reviewCount: stats.totalReviews,\n      ratingDistribution: stats.distribution,\n    });\n  }\n});\n\nconst Review = (mongoose.models.Review || \n  mongoose.model<IReview, IReviewModel>(\"Review\", reviewSchema)) as IReviewModel;\nexport default Review;\n","import express, { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport Review from \"../models/Review\";\nimport Product from \"../models/Product\";\nimport Order from \"../models/Order\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = express.Router();\n\n// Get reviews for a product\nrouter.get(\"/product/:productId\", async (req: Request, res: Response) => {\n  try {\n    const { productId } = req.params;\n    const { page = 1, limit = 10, sort = \"newest\" } = req.query;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(productId)) {\n      return res.status(400).json({ error: \"Invalid product ID\" });\n    }\n\n    // Check if product exists\n    const product = await Product.findById(productId);\n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n\n    // Build query\n    const query = { product: productId };\n\n    // Build sort options\n    let sortOptions: any = {};\n    switch (sort) {\n      case \"newest\":\n        sortOptions = { createdAt: -1 };\n        break;\n      case \"oldest\":\n        sortOptions = { createdAt: 1 };\n        break;\n      case \"highest\":\n        sortOptions = { rating: -1 };\n        break;\n      case \"lowest\":\n        sortOptions = { rating: 1 };\n        break;\n      default:\n        sortOptions = { createdAt: -1 };\n    }\n\n    // Calculate pagination\n    const pageNum = parseInt(page as string) || 1;\n    const limitNum = parseInt(limit as string) || 10;\n    const skip = (pageNum - 1) * limitNum;\n\n    // Get reviews with pagination\n    const reviews = await Review.find(query)\n      .populate(\"user\", \"name avatar\")\n      .sort(sortOptions)\n      .skip(skip)\n      .limit(limitNum);\n\n    // Get total count for pagination\n    const total = await Review.countDocuments(query);\n\n    // Calculate average rating\n    const stats = await Review.aggregate([\n      { $match: { product: new mongoose.Types.ObjectId(productId) } },\n      {\n        $group: {\n          _id: null,\n          averageRating: { $avg: \"$rating\" },\n          totalReviews: { $sum: 1 },\n          ratingDistribution: {\n            $push: \"$rating\",\n          },\n        },\n      },\n    ]);\n\n    const ratingStats = stats[0] || {\n      averageRating: 0,\n      totalReviews: 0,\n      ratingDistribution: [],\n    };\n\n    // Calculate rating distribution\n    const distribution: { [key: number]: number } = {};\n    [1, 2, 3, 4, 5].forEach((rating) => {\n      distribution[rating] = ratingStats.ratingDistribution.filter((r: number) => r === rating).length;\n    });\n\n    res.json({\n      reviews,\n      pagination: {\n        currentPage: pageNum,\n        totalPages: Math.ceil(total / limitNum),\n        totalReviews: total,\n        hasNextPage: pageNum * limitNum < total,\n        hasPrevPage: pageNum > 1,\n      },\n      stats: {\n        averageRating: Math.round(ratingStats.averageRating * 10) / 10,\n        totalReviews: ratingStats.totalReviews,\n        distribution,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching reviews:\", error);\n    res.status(500).json({ error: \"Failed to fetch reviews\" });\n  }\n});\n\n// Create a new review\nrouter.post(\"/\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { productId, rating, title, comment } = req.body;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    // Validate required fields\n    if (!productId || !rating || !title || !comment) {\n      return res.status(400).json({\n        error: \"Product ID, rating, title, and comment are required\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(productId)) {\n      return res.status(400).json({ error: \"Invalid product ID\" });\n    }\n\n    // Validate rating\n    if (rating < 1 || rating > 5) {\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\n    }\n\n    // Check if product exists\n    const product = await Product.findById(productId);\n    if (!product) {\n      return res.status(404).json({ error: \"Product not found\" });\n    }\n\n    // Check if user already reviewed this product\n    const existingReview = await Review.findOne({\n      product: productId,\n      user: userId,\n    });\n\n    if (existingReview) {\n      return res\n        .status(400)\n        .json({ error: \"You have already reviewed this product\" });\n    }\n\n    // Check if user purchased this product (for verified review)\n    const hasPurchased = await Order.exists({\n      user: userId,\n      \"items.product\": productId,\n      status: { $in: [\"completed\", \"delivered\"] },\n    });\n\n    // Create review\n    const review = new Review({\n      product: productId,\n      user: userId,\n      rating,\n      title: title.trim(),\n      comment: comment.trim(),\n      verified: !!hasPurchased,\n    });\n\n    await review.save();\n\n    // Populate user info for response\n    await review.populate(\"user\", \"name avatar\");\n\n    res.status(201).json(review);\n  } catch (error) {\n    console.error(\"Error creating review:\", error);\n    res.status(500).json({ error: \"Failed to create review\" });\n  }\n});\n\n// Update a review\nrouter.put(\"/:reviewId\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { reviewId } = req.params;\n    const { rating, title, comment } = req.body;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      return res.status(400).json({ error: \"Invalid review ID\" });\n    }\n\n    // Validate rating if provided\n    if (rating && (rating < 1 || rating > 5)) {\n      return res.status(400).json({ error: \"Rating must be between 1 and 5\" });\n    }\n\n    // Find the review\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n\n    // Check if user owns this review or is admin\n    if (review.user.toString() !== userId) {\n      return res.status(403).json({ error: \"You can only edit your own reviews\" });\n    }\n\n    // Update review\n    if (rating !== undefined) review.rating = rating;\n    if (title !== undefined) review.title = title.trim();\n    if (comment !== undefined) review.comment = comment.trim();\n\n    await review.save();\n\n    // Populate user info for response\n    await review.populate(\"user\", \"name avatar\");\n\n    res.json(review);\n  } catch (error) {\n    console.error(\"Error updating review:\", error);\n    res.status(500).json({ error: \"Failed to update review\" });\n  }\n});\n\n// Delete a review\nrouter.delete(\"/:reviewId\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { reviewId } = req.params;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n    const userRole = authReq.user!.role;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      return res.status(400).json({ error: \"Invalid review ID\" });\n    }\n\n    // Find the review\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n\n    // Check if user owns this review or is admin\n    if (review.user.toString() !== userId && userRole !== \"admin\") {\n      return res.status(403).json({ error: \"You can only delete your own reviews\" });\n    }\n\n    await Review.findByIdAndDelete(reviewId);\n\n    res.json({ message: \"Review deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting review:\", error);\n    res.status(500).json({ error: \"Failed to delete review\" });\n  }\n});\n\n// Get user's reviews\nrouter.get(\"/user\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n    const { page = 1, limit = 10 } = req.query;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    // Calculate pagination\n    const pageNum = parseInt(page as string) || 1;\n    const limitNum = parseInt(limit as string) || 10;\n    const skip = (pageNum - 1) * limitNum;\n\n    // Get user's reviews\n    const reviews = await Review.find({ user: userId })\n      .populate(\"product\", \"name images\")\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(limitNum);\n\n    // Get total count\n    const total = await Review.countDocuments({ user: userId });\n\n    res.json({\n      reviews,\n      pagination: {\n        currentPage: pageNum,\n        totalPages: Math.ceil(total / limitNum),\n        totalReviews: total,\n        hasNextPage: pageNum * limitNum < total,\n        hasPrevPage: pageNum > 1,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching user reviews:\", error);\n    res.status(500).json({ error: \"Failed to fetch user reviews\" });\n  }\n});\n\n// Like/Unlike a review\nrouter.post(\"/:reviewId/like\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { reviewId } = req.params;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      return res.status(400).json({ error: \"Invalid review ID\" });\n    }\n\n    // Find the review\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n\n    // Check if user already liked this review\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    const hasLiked = review.likes?.includes(userObjectId) || false;\n\n    if (hasLiked) {\n      // Unlike\n      review.likes = review.likes?.filter((id: any) => id.toString() !== userId) || [];\n    } else {\n      // Like\n      if (!review.likes) review.likes = [];\n      review.likes.push(userObjectId);\n    }\n\n    await review.save();\n\n    res.json({\n      liked: !hasLiked,\n      likesCount: review.likes?.length || 0,\n    });\n  } catch (error) {\n    console.error(\"Error toggling review like:\", error);\n    res.status(500).json({ error: \"Failed to toggle review like\" });\n  }\n});\n\n// Mark review as helpful/unhelpful\nrouter.post(\"/:reviewId/helpful\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { reviewId } = req.params;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      return res.status(400).json({ error: \"Invalid review ID\" });\n    }\n\n    // Find the review\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n\n    // Check if user already marked this review as helpful\n    const userObjectId = new mongoose.Types.ObjectId(userId);\n    const hasMarkedHelpful = review.helpfulUsers.includes(userObjectId);\n\n    if (hasMarkedHelpful) {\n      // Remove helpful vote\n      review.helpfulUsers = review.helpfulUsers.filter(\n        (id: any) => id.toString() !== userId\n      );\n      review.helpful = Math.max(0, review.helpful - 1);\n    } else {\n      // Add helpful vote\n      review.helpfulUsers.push(userObjectId);\n      review.helpful += 1;\n    }\n\n    await review.save();\n\n    res.json({\n      helpful: review.helpful,\n      userMarkedHelpful: !hasMarkedHelpful,\n    });\n  } catch (error) {\n    console.error(\"Error toggling helpful status:\", error);\n    res.status(500).json({ error: \"Failed to toggle helpful status\" });\n  }\n});\n\n// Report a review\nrouter.post(\"/:reviewId/report\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { reviewId } = req.params;\n    const { reason } = req.body;\n    const authReq = req as AuthRequest;\n    const userId = authReq.user!.userId;\n\n    // Require database connection\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error:\n          \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!mongoose.Types.ObjectId.isValid(reviewId)) {\n      return res.status(400).json({ error: \"Invalid review ID\" });\n    }\n\n    if (!reason) {\n      return res.status(400).json({ error: \"Report reason is required\" });\n    }\n\n    // Find the review\n    const review = await Review.findById(reviewId);\n    if (!review) {\n      return res.status(404).json({ error: \"Review not found\" });\n    }\n\n    // Check if user already reported this review\n    const hasReported = review.reports?.some(\n      (report: any) => report.user.toString() === userId,\n    ) || false;\n\n    if (hasReported) {\n      return res.status(400).json({ error: \"You have already reported this review\" });\n    }\n\n    // Add report\n    if (!review.reports) review.reports = [];\n    review.reports.push({\n      user: new mongoose.Types.ObjectId(userId),\n      reason: reason.trim(),\n      reportedAt: new Date(),\n    });\n\n    await review.save();\n\n    res.json({ message: \"Review reported successfully\" });\n  } catch (error) {\n    console.error(\"Error reporting review:\", error);\n    res.status(500).json({ error: \"Failed to report review\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\n\nconst router = Router();\n\n// Simple in-memory storage for analytics (in production, use a proper database)\nconst performanceMetrics: any[] = [];\nconst errorLogs: any[] = [];\nconst slowResources: any[] = [];\n\n// Performance metrics endpoint\nrouter.post(\n  \"/performance\",\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { metrics, url, userAgent, timestamp } = req.body;\n\n      const entry = {\n        metrics,\n        url,\n        userAgent: userAgent?.substring(0, 200), // Limit user agent length\n        timestamp,\n        ip: req.ip,\n      };\n\n      performanceMetrics.push(entry);\n\n      // Keep only last 1000 entries\n      if (performanceMetrics.length > 1000) {\n        performanceMetrics.splice(0, performanceMetrics.length - 1000);\n      }\n\n      res.status(200).json({ success: true });\n    } catch (error) {\n      console.error(\"Performance analytics error:\", error);\n      res.status(500).json({ error: \"Failed to log performance metrics\" });\n    }\n  },\n);\n\n// Error logging endpoint\nrouter.post(\"/errors\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { message, filename, lineno, colno, stack, reason, url, timestamp } =\n      req.body;\n\n    const entry = {\n      message: message?.substring(0, 500),\n      filename: filename?.substring(0, 200),\n      lineno,\n      colno,\n      stack: stack?.substring(0, 1000),\n      reason: reason?.substring(0, 500),\n      url,\n      timestamp,\n      ip: req.ip,\n    };\n\n    errorLogs.push(entry);\n\n    // Keep only last 1000 entries\n    if (errorLogs.length > 1000) {\n      errorLogs.splice(0, errorLogs.length - 1000);\n    }\n\n    res.status(200).json({ success: true });\n  } catch (error) {\n    console.error(\"Error analytics error:\", error);\n    res.status(500).json({ error: \"Failed to log error\" });\n  }\n});\n\n// Slow resources endpoint\nrouter.post(\n  \"/slow-resources\",\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      const { resources, url, timestamp } = req.body;\n\n      const entry = {\n        resources: resources?.slice(0, 10), // Limit to 10 resources\n        url,\n        timestamp,\n        ip: req.ip,\n      };\n\n      slowResources.push(entry);\n\n      // Keep only last 500 entries\n      if (slowResources.length > 500) {\n        slowResources.splice(0, slowResources.length - 500);\n      }\n\n      res.status(200).json({ success: true });\n    } catch (error) {\n      console.error(\"Slow resources analytics error:\", error);\n      res.status(500).json({ error: \"Failed to log slow resources\" });\n    }\n  },\n);\n\n// Analytics dashboard endpoint (admin only)\nrouter.get(\"/dashboard\", async (req: Request, res: Response): Promise<void> => {\n  try {\n    // In production, you'd want proper authentication here\n    const summary = {\n      performanceMetrics: {\n        count: performanceMetrics.length,\n        recent: performanceMetrics.slice(-10),\n        averages: calculateAverages(),\n      },\n      errorLogs: {\n        count: errorLogs.length,\n        recent: errorLogs.slice(-10),\n      },\n      slowResources: {\n        count: slowResources.length,\n        recent: slowResources.slice(-10),\n      },\n    };\n\n    res.json(summary);\n  } catch (error) {\n    console.error(\"Analytics dashboard error:\", error);\n    res.status(500).json({ error: \"Failed to generate analytics dashboard\" });\n  }\n});\n\nfunction calculateAverages() {\n  if (performanceMetrics.length === 0) return {};\n\n  const totals = {\n    fcp: 0,\n    lcp: 0,\n    fid: 0,\n    cls: 0,\n    ttfb: 0,\n    count: 0,\n  };\n\n  performanceMetrics.forEach((entry) => {\n    if (entry.metrics) {\n      if (entry.metrics.fcp) {\n        totals.fcp += entry.metrics.fcp;\n        totals.count++;\n      }\n      if (entry.metrics.lcp) totals.lcp += entry.metrics.lcp;\n      if (entry.metrics.fid) totals.fid += entry.metrics.fid;\n      if (entry.metrics.cls) totals.cls += entry.metrics.cls;\n      if (entry.metrics.ttfb) totals.ttfb += entry.metrics.ttfb;\n    }\n  });\n\n  return {\n    fcp: totals.count > 0 ? totals.fcp / totals.count : 0,\n    lcp: totals.count > 0 ? totals.lcp / totals.count : 0,\n    fid: totals.count > 0 ? totals.fid / totals.count : 0,\n    cls: totals.count > 0 ? totals.cls / totals.count : 0,\n    ttfb: totals.count > 0 ? totals.ttfb / totals.count : 0,\n  };\n}\n\nexport default router;\n","import mongoose, { Document, Schema } from \"mongoose\";\n\nexport interface IShiprocketCustomer {\n  name: string;\n  email: string;\n  phone: string;\n}\n\nexport interface IShiprocketAddress {\n  full: string;\n  city: string;\n  state: string;\n  country: string;\n  pincode: string;\n}\n\nexport interface IShiprocketItem {\n  name: string;\n  sku: string;\n  quantity: number;\n  price: number;\n  weight?: number;\n  length?: number;\n  breadth?: number;\n  height?: number;\n}\n\nexport interface IShiprocketOrder extends Document {\n  order_id: string;\n  shipment_id?: string;\n  awb_code?: string;\n  status: string;\n  customer: IShiprocketCustomer;\n  address: IShiprocketAddress;\n  items: IShiprocketItem[];\n  // Shipping details\n  weight?: number;\n  dimensions?: {\n    length: number;\n    breadth: number;\n    height: number;\n  };\n  payment_method: string;\n  shipping_charges?: number;\n  total_discount?: number;\n  cod_amount?: number;\n  // Shiprocket specific fields\n  courier_company_id?: string;\n  courier_name?: string;\n  tracking_url?: string;\n  expected_delivery_date?: Date;\n  // Status tracking\n  pickup_scheduled_date?: Date;\n  shipped_date?: Date;\n  delivered_date?: Date;\n  cancelled_date?: Date;\n  returned_date?: Date;\n  // Additional info\n  comment?: string;\n  channel_id?: string;\n  reseller_name?: string;\n  company_name?: string;\n  // Timestamps\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst shiprocketCustomerSchema = new Schema<IShiprocketCustomer>({\n  name: { type: String, required: true, trim: true },\n  email: { type: String, required: true, trim: true, lowercase: true },\n  phone: { type: String, required: true, trim: true }\n});\n\nconst shiprocketAddressSchema = new Schema<IShiprocketAddress>({\n  full: { type: String, required: true, trim: true },\n  city: { type: String, required: true, trim: true },\n  state: { type: String, required: true, trim: true },\n  country: { type: String, required: true, trim: true, default: 'India' },\n  pincode: { type: String, required: true, trim: true }\n});\n\nconst shiprocketItemSchema = new Schema<IShiprocketItem>({\n  name: { type: String, required: true, trim: true },\n  sku: { type: String, required: true, trim: true },\n  quantity: { type: Number, required: true, min: 1 },\n  price: { type: Number, required: true, min: 0 },\n  weight: { type: Number, min: 0 }, // in kg\n  length: { type: Number, min: 0 }, // in cm\n  breadth: { type: Number, min: 0 }, // in cm\n  height: { type: Number, min: 0 } // in cm\n});\n\nconst shiprocketOrderSchema = new Schema<IShiprocketOrder>(\n  {\n    order_id: {\n    type: String,\n    required: true,\n  },\n  shipment_id: {\n    type: String,\n    required: true,\n  },\n  awb_code: {\n    type: String,\n    required: true,\n  },\n    status: { \n      type: String, \n      required: true,\n      enum: [\n        'NEW',\n        'PICKUP_SCHEDULED',\n        'PICKED_UP',\n        'IN_TRANSIT',\n        'OUT_FOR_DELIVERY',\n        'DELIVERED',\n        'CANCELLED',\n        'RTO_INITIATED',\n        'RTO_DELIVERED',\n        'LOST',\n        'DAMAGED',\n        'PENDING'\n      ],\n      default: 'NEW'\n    },\n    customer: {\n      type: shiprocketCustomerSchema,\n      required: true\n    },\n    address: {\n      type: shiprocketAddressSchema,\n      required: true\n    },\n    items: {\n      type: [shiprocketItemSchema],\n      required: true,\n      validate: {\n        validator: function(items: IShiprocketItem[]) {\n          return items && items.length > 0;\n        },\n        message: 'At least one item is required'\n      }\n    },\n    // Shipping details\n    weight: { \n      type: Number, \n      min: 0,\n      default: 0.5 // Default 500g\n    },\n    dimensions: {\n      length: { type: Number, min: 0, default: 10 },\n      breadth: { type: Number, min: 0, default: 10 },\n      height: { type: Number, min: 0, default: 10 }\n    },\n    payment_method: {\n      type: String,\n      required: true,\n      enum: ['COD', 'Prepaid'],\n      default: 'Prepaid'\n    },\n    shipping_charges: { type: Number, min: 0, default: 0 },\n    total_discount: { type: Number, min: 0, default: 0 },\n    cod_amount: { type: Number, min: 0, default: 0 },\n    // Shiprocket specific fields\n    courier_company_id: { type: String, trim: true },\n    courier_name: { type: String, trim: true },\n    tracking_url: { type: String, trim: true },\n    expected_delivery_date: { type: Date },\n    // Status tracking dates\n    pickup_scheduled_date: { type: Date },\n    shipped_date: { type: Date },\n    delivered_date: { type: Date },\n    cancelled_date: { type: Date },\n    returned_date: { type: Date },\n    // Additional info\n    comment: { type: String, trim: true },\n    channel_id: { type: String, trim: true },\n    reseller_name: { type: String, trim: true },\n    company_name: { type: String, trim: true }\n  },\n  {\n    timestamps: true,\n    collection: 'shiprocket_orders'\n  }\n);\n\n// Indexes for better query performance\nshiprocketOrderSchema.index({ order_id: 1 });\nshiprocketOrderSchema.index({ shipment_id: 1 });\nshiprocketOrderSchema.index({ awb_code: 1 });\nshiprocketOrderSchema.index({ status: 1 });\nshiprocketOrderSchema.index({ 'customer.email': 1 });\nshiprocketOrderSchema.index({ createdAt: -1 });\n\n// Virtual for total order value\nshiprocketOrderSchema.virtual('total_value').get(function() {\n  return this.items.reduce((total: number, item: IShiprocketItem) => {\n    return total + (item.price * item.quantity);\n  }, 0);\n});\n\n// Virtual for total weight\nshiprocketOrderSchema.virtual('total_weight').get(function() {\n  const itemsWeight = this.items.reduce((total: number, item: IShiprocketItem) => {\n    return total + ((item.weight || 0.1) * item.quantity);\n  }, 0);\n  return Math.max(itemsWeight, this.weight || 0.5);\n});\n\n// Pre-save middleware to calculate totals\nshiprocketOrderSchema.pre('save', function(next) {\n  // Calculate total value\n  const totalValue = this.items.reduce((total: number, item: IShiprocketItem) => {\n    return total + (item.price * item.quantity);\n  }, 0);\n  \n  // Set COD amount based on payment method\n  if (this.payment_method === 'COD') {\n    this.cod_amount = totalValue;\n  } else {\n    this.cod_amount = 0;\n  }\n  \n  // Calculate total weight if not provided\n  if (!this.weight) {\n    const itemsWeight = this.items.reduce((total: number, item: IShiprocketItem) => {\n      return total + ((item.weight || 0.1) * item.quantity);\n    }, 0);\n    this.weight = Math.max(itemsWeight, 0.5);\n  }\n  \n  next();\n});\n\n// Method to update status with timestamp\nshiprocketOrderSchema.methods.updateStatus = function(newStatus: string) {\n  this.status = newStatus;\n  \n  const now = new Date();\n  switch (newStatus) {\n    case 'PICKUP_SCHEDULED':\n      this.pickup_scheduled_date = now;\n      break;\n    case 'PICKED_UP':\n    case 'IN_TRANSIT':\n      this.shipped_date = now;\n      break;\n    case 'DELIVERED':\n      this.delivered_date = now;\n      break;\n    case 'CANCELLED':\n      this.cancelled_date = now;\n      break;\n    case 'RTO_DELIVERED':\n      this.returned_date = now;\n      break;\n  }\n  \n  return this.save();\n};\n\n// Static method to find by AWB\nshiprocketOrderSchema.statics.findByAwb = function(awb: string) {\n  return this.findOne({ awb_code: awb });\n};\n\n// Static method to find by shipment ID\nshiprocketOrderSchema.statics.findByShipmentId = function(shipmentId: string) {\n  return this.findOne({ shipment_id: shipmentId });\n};\n\n// Fix for Mongoose/TypeScript linter errors\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst ShiprocketOrderModel: any = mongoose.models.ShiprocketOrder || \n  mongoose.model<IShiprocketOrder>(\"ShiprocketOrder\", shiprocketOrderSchema);\n\nexport default ShiprocketOrderModel;\n","import { Request, Response } from \"express\";\nimport ShiprocketOrder from \"../models/ShiprocketOrder\";\nimport { makeShiprocketRequest, checkShiprocketPermissions } from \"../utils/shiprocketAuth\";\n\ninterface CreateOrderRequest extends Request {\n  body: {\n    order_id: string;\n    customer: {\n      name: string;\n      email: string;\n      phone: string;\n    };\n    address: {\n      full: string;\n      city: string;\n      state: string;\n      country?: string;\n      pincode: string;\n    };\n    items: Array<{\n      name: string;\n      sku: string;\n      quantity: number;\n      price: number;\n      weight?: number;\n      length?: number;\n      breadth?: number;\n      height?: number;\n    }>;\n    payment_method?: 'COD' | 'Prepaid';\n    weight?: number;\n    dimensions?: {\n      length: number;\n      breadth: number;\n      height: number;\n    };\n    shipping_charges?: number;\n    total_discount?: number;\n    comment?: string;\n  };\n}\n\ninterface CancelOrderRequest extends Request {\n  body: {\n    shipment_id: string;\n    comment?: string;\n  };\n}\n\n/**\n * Check Shiprocket API permissions and status\n */\nexport const checkApiStatus = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const permissions = await checkShiprocketPermissions();\n    \n    res.status(200).json({\n      success: true,\n      message: 'Shiprocket API status checked',\n      data: {\n        api_accessible: !permissions.error,\n        permissions: permissions,\n        recommendations: permissions.error ? [\n          'Contact Shiprocket support to enable API permissions',\n          'Verify your Shiprocket account is fully activated',\n          'Check if your account has the required API access level'\n        ] : []\n      }\n    });\n  } catch (error: any) {\n    res.status(500).json({\n      success: false,\n      error: 'Failed to check API status',\n      details: error.message\n    });\n  }\n};\n\n/**\n * Create a new order in Shiprocket with enhanced error handling\n */\nexport const createOrder = async (req: CreateOrderRequest, res: Response): Promise<void> => {\n  try {\n    const {\n      order_id,\n      customer,\n      address,\n      items,\n      payment_method = 'Prepaid',\n      weight,\n      dimensions,\n      shipping_charges = 0,\n      total_discount = 0,\n      comment\n    } = req.body;\n\n    // Validate required fields\n    if (!order_id || !customer || !address || !items || items.length === 0) {\n      res.status(400).json({\n        success: false,\n        error: 'Missing required fields: order_id, customer, address, and items are required'\n      });\n      return;\n    }\n\n    // Check if order already exists\n    const existingOrder = await ShiprocketOrder.findOne({ order_id });\n    if (existingOrder) {\n      res.status(409).json({\n        success: false,\n        error: 'Order with this ID already exists',\n        data: existingOrder\n      });\n      return;\n    }\n\n    // Check API permissions first\n    const permissions = await checkShiprocketPermissions();\n    if (!permissions.canCreateOrders) {\n      res.status(403).json({\n        success: false,\n        error: 'Shiprocket API Permission Error',\n        details: permissions.error,\n        recommendations: [\n          'Contact Shiprocket support to enable order creation permissions',\n          'Verify your Shiprocket account is fully activated',\n          'Check if your account has the required API access level'\n        ]\n      });\n      return;\n    }\n\n    // Calculate total order value\n    const orderValue = items.reduce((total, item) => total + (item.price * item.quantity), 0);\n\n    // Prepare Shiprocket API payload\n    const shiprocketPayload = {\n      order_id: order_id,\n      order_date: new Date().toISOString().split('T')[0], // YYYY-MM-DD format\n      pickup_location: \"Primary\", // This should be configured in Shiprocket dashboard\n      channel_id: \"\", // Optional\n      comment: comment || \"\",\n      billing_customer_name: customer.name,\n      billing_last_name: \"\",\n      billing_address: address.full,\n      billing_address_2: \"\",\n      billing_city: address.city,\n      billing_pincode: address.pincode,\n      billing_state: address.state,\n      billing_country: address.country || \"India\",\n      billing_email: customer.email,\n      billing_phone: customer.phone,\n      shipping_is_billing: true,\n      shipping_customer_name: customer.name,\n      shipping_last_name: \"\",\n      shipping_address: address.full,\n      shipping_address_2: \"\",\n      shipping_city: address.city,\n      shipping_pincode: address.pincode,\n      shipping_state: address.state,\n      shipping_country: address.country || \"India\",\n      shipping_email: customer.email,\n      shipping_phone: customer.phone,\n      order_items: items.map(item => ({\n        name: item.name,\n        sku: item.sku,\n        units: item.quantity,\n        selling_price: item.price,\n        discount: \"\",\n        tax: \"\",\n        hsn: 441122 // Default HSN code, should be product-specific\n      })),\n      payment_method: payment_method,\n      shipping_charges: shipping_charges,\n      giftwrap_charges: 0,\n      transaction_charges: 0,\n      total_discount: total_discount,\n      sub_total: orderValue,\n      length: dimensions?.length || 10,\n      breadth: dimensions?.breadth || 10,\n      height: dimensions?.height || 10,\n      weight: weight || 0.5\n    };\n\n    // Call Shiprocket API to create order\n    const shiprocketResponse = await makeShiprocketRequest(\n      'POST',\n      'https://apiv2.shiprocket.in/v1/external/orders/create/adhoc',\n      shiprocketPayload\n    );\n\n    if (!shiprocketResponse.order_id) {\n      res.status(400).json({\n        success: false,\n        error: 'Failed to create order in Shiprocket',\n        details: shiprocketResponse\n      });\n      return;\n    }\n\n    // Save order to MongoDB\n    const newOrder = new ShiprocketOrder({\n      order_id: order_id,\n      shipment_id: shiprocketResponse.shipment_id?.toString(),\n      awb_code: shiprocketResponse.awb_code,\n      status: 'NEW',\n      customer: customer,\n      address: address,\n      items: items,\n      weight: weight || 0.5,\n      dimensions: dimensions || { length: 10, breadth: 10, height: 10 },\n      payment_method: payment_method,\n      shipping_charges: shipping_charges,\n      total_discount: total_discount,\n      cod_amount: payment_method === 'COD' ? orderValue : 0,\n      comment: comment\n    });\n\n    const savedOrder = await newOrder.save();\n\n    res.status(201).json({\n      success: true,\n      message: 'Order created successfully',\n      data: {\n        order_id: savedOrder.order_id,\n        shipment_id: savedOrder.shipment_id,\n        awb_code: savedOrder.awb_code,\n        status: savedOrder.status,\n        shiprocket_response: shiprocketResponse\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Create order error:', error);\n    \n    // Handle specific permission errors\n    if (error.message.includes('Permission Error') || error.message.includes('403')) {\n      res.status(403).json({\n        success: false,\n        error: 'Shiprocket API Permission Error',\n        details: error.message,\n        recommendations: [\n          'Contact Shiprocket support to enable order creation permissions',\n          'Verify your Shiprocket account is fully activated',\n          'Check if your account has the required API access level'\n        ]\n      });\n      return;\n    }\n    \n    if (error.response && error.response.data) {\n      res.status(error.response.status || 500).json({\n        success: false,\n        error: 'Shiprocket API error',\n        details: error.response.data\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n        details: error.message\n      });\n    }\n  }\n};\n\n/**\n * Track an order using AWB code\n */\nexport const trackOrder = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { awb } = req.params;\n\n    if (!awb) {\n      res.status(400).json({\n        success: false,\n        error: 'AWB code is required'\n      });\n      return;\n    }\n\n    // Find order in database\n    const order = await ShiprocketOrder.findByAwb(awb);\n    if (!order) {\n      res.status(404).json({\n        success: false,\n        error: 'Order not found with provided AWB code'\n      });\n      return;\n    }\n\n    // Get tracking information from Shiprocket\n    const trackingResponse = await makeShiprocketRequest(\n      'GET',\n      `https://apiv2.shiprocket.in/v1/external/courier/track/awb/${awb}`\n    );\n\n    // Update order status if different\n    if (trackingResponse.tracking_data && trackingResponse.tracking_data.track_status) {\n      const latestStatus = trackingResponse.tracking_data.track_status;\n      if (order.status !== latestStatus) {\n        await order.updateStatus(latestStatus);\n      }\n    }\n\n    // Format tracking data for frontend\n    const trackingInfo = {\n      awb_code: awb,\n      order_id: order.order_id,\n      shipment_id: order.shipment_id,\n      current_status: order.status,\n      courier_name: order.courier_name,\n      tracking_url: order.tracking_url,\n      expected_delivery: order.expected_delivery_date,\n      pickup_scheduled_date: order.pickup_scheduled_date,\n      shipped_date: order.shipped_date,\n      delivered_date: order.delivered_date,\n      customer: order.customer,\n      address: order.address,\n      shiprocket_tracking: trackingResponse.tracking_data || null,\n      scan_details: trackingResponse.tracking_data?.shipment_track || []\n    };\n\n    res.status(200).json({\n      success: true,\n      message: 'Tracking information retrieved successfully',\n      data: trackingInfo\n    });\n\n  } catch (error: any) {\n    console.error('Track order error:', error);\n    \n    if (error.response && error.response.status === 404) {\n      res.status(404).json({\n        success: false,\n        error: 'Tracking information not available for this AWB code'\n      });\n    } else if (error.response && error.response.data) {\n      res.status(error.response.status || 500).json({\n        success: false,\n        error: 'Shiprocket tracking API error',\n        details: error.response.data\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n        details: error.message\n      });\n    }\n  }\n};\n\n/**\n * Cancel an order/shipment\n */\nexport const cancelOrder = async (req: CancelOrderRequest, res: Response): Promise<void> => {\n  try {\n    const { shipment_id, comment } = req.body;\n\n    if (!shipment_id) {\n      res.status(400).json({\n        success: false,\n        error: 'Shipment ID is required'\n      });\n      return;\n    }\n\n    // Find order in database\n    const order = await ShiprocketOrder.findByShipmentId(shipment_id);\n    if (!order) {\n      res.status(404).json({\n        success: false,\n        error: 'Order not found with provided shipment ID'\n      });\n      return;\n    }\n\n    // Check if order can be cancelled\n    const nonCancellableStatuses = ['DELIVERED', 'CANCELLED', 'RTO_DELIVERED'];\n    if (nonCancellableStatuses.includes(order.status)) {\n      res.status(400).json({\n        success: false,\n        error: `Cannot cancel order with status: ${order.status}`\n      });\n      return;\n    }\n\n    // Cancel order in Shiprocket\n    const cancelPayload = {\n      awbs: [order.awb_code]\n    };\n\n    const cancelResponse = await makeShiprocketRequest(\n      'POST',\n      'https://apiv2.shiprocket.in/v1/external/orders/cancel',\n      cancelPayload\n    );\n\n    // Update order status in database\n    await order.updateStatus('CANCELLED');\n    if (comment) {\n      order.comment = comment;\n      await order.save();\n    }\n\n    res.status(200).json({\n      success: true,\n      message: 'Order cancelled successfully',\n      data: {\n        order_id: order.order_id,\n        shipment_id: order.shipment_id,\n        awb_code: order.awb_code,\n        status: order.status,\n        cancelled_date: order.cancelled_date,\n        shiprocket_response: cancelResponse\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Cancel order error:', error);\n    \n    if (error.response && error.response.data) {\n      res.status(error.response.status || 500).json({\n        success: false,\n        error: 'Shiprocket cancellation API error',\n        details: error.response.data\n      });\n    } else {\n      res.status(500).json({\n        success: false,\n        error: 'Internal server error',\n        details: error.message\n      });\n    }\n  }\n};\n\n/**\n * Get all orders with optional filtering\n */\nexport const getOrders = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { \n      status, \n      customer_email, \n      awb_code, \n      order_id,\n      page = 1, \n      limit = 10 \n    } = req.query;\n\n    // Build filter object\n    const filter: any = {};\n    if (status) filter.status = status;\n    if (customer_email) filter['customer.email'] = customer_email;\n    if (awb_code) filter.awb_code = awb_code;\n    if (order_id) filter.order_id = order_id;\n\n    // Calculate pagination\n    const skip = (Number(page) - 1) * Number(limit);\n\n    // Get orders with pagination\n    const orders = await ShiprocketOrder.find(filter)\n      .sort({ createdAt: -1 })\n      .skip(skip)\n      .limit(Number(limit))\n      .select('-__v');\n\n    const totalOrders = await ShiprocketOrder.countDocuments(filter);\n    const totalPages = Math.ceil(totalOrders / Number(limit));\n\n    res.status(200).json({\n      success: true,\n      message: 'Orders retrieved successfully',\n      data: {\n        orders,\n        pagination: {\n          current_page: Number(page),\n          total_pages: totalPages,\n          total_orders: totalOrders,\n          limit: Number(limit)\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error('Get orders error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n      details: error.message\n    });\n  }\n};\n\n/**\n * Get order details by order ID\n */\nexport const getOrderById = async (req: Request, res: Response): Promise<void> => {\n  try {\n    const { orderId } = req.params;\n\n    const order = await ShiprocketOrder.findOne({ order_id: orderId });\n    if (!order) {\n      res.status(404).json({\n        success: false,\n        error: 'Order not found'\n      });\n      return;\n    }\n\n    res.status(200).json({\n      success: true,\n      message: 'Order details retrieved successfully',\n      data: order\n    });\n\n  } catch (error: any) {\n    console.error('Get order by ID error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Internal server error',\n      details: error.message\n    });\n  }\n};\n","import { Router } from \"express\";\nimport {\n  createOrder,\n  trackOrder,\n  cancelOrder,\n  getOrders,\n  getOrderById,\n  checkApiStatus\n} from \"../controllers/shiprocketController\";\nimport { authenticateToken, requireAdmin } from \"../middleware/auth\";\n\nconst router = Router();\n\n/**\n * @route   GET /api/shiprocket/status\n * @desc    Check Shiprocket API status and permissions\n * @access  Private (Admin only)\n */\nrouter.get(\"/status\", authenticateToken, requireAdmin, checkApiStatus);\n\n/**\n * @route   POST /api/shiprocket/create\n * @desc    Create a new order in Shiprocket\n * @access  Private (Admin or User)\n */\nrouter.post(\"/create\", authenticateToken, createOrder);\n\n/**\n * @route   GET /api/shiprocket/track/:awb\n * @desc    Track an order using AWB code\n * @access  Public (Can be accessed by anyone with AWB)\n */\nrouter.get(\"/track/:awb\", trackOrder);\n\n/**\n * @route   POST /api/shiprocket/cancel\n * @desc    Cancel an order/shipment\n * @access  Private (Admin only)\n */\nrouter.post(\"/cancel\", authenticateToken, requireAdmin, cancelOrder);\n\n/**\n * @route   GET /api/shiprocket/orders\n * @desc    Get all orders with optional filtering\n * @access  Private (Admin only)\n */\nrouter.get(\"/orders\", authenticateToken, requireAdmin, getOrders);\n\n/**\n * @route   GET /api/shiprocket/orders/:orderId\n * @desc    Get order details by order ID\n * @access  Private (Admin or User who created the order)\n */\nrouter.get(\"/orders/:orderId\", authenticateToken, getOrderById);\n\nexport default router;\n","import express, { Request, Response } from \"express\";\nimport mongoose from \"mongoose\";\nimport Product from \"../models/Product\";\nimport Category from \"../models/Category\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = express.Router();\n\n// Advanced search with autocomplete\nrouter.get(\"/autocomplete\", async (req: Request, res: Response) => {\n  try {\n    const { q } = req.query;\n\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    if (!q || typeof q !== \"string\" || q.trim().length < 2) {\n      return res.json({ suggestions: [] });\n    }\n\n    const searchTerm = q.trim();\n\n    // Get product suggestions\n    const productSuggestions = await Product.aggregate([\n      {\n        $match: {\n          status: \"active\",\n          $or: [\n            { name: { $regex: searchTerm, $options: \"i\" } },\n            { description: { $regex: searchTerm, $options: \"i\" } },\n            { tags: { $regex: searchTerm, $options: \"i\" } },\n          ],\n        },\n      },\n      {\n        $project: {\n          _id: 1,\n          name: 1,\n          slug: 1,\n          price: 1,\n          images: { $slice: [\"$images\", 1] },\n          type: { $literal: \"product\" },\n        },\n      },\n      { $limit: 5 },\n    ]);\n\n    // Get category suggestions\n    const categorySuggestions = await Category.aggregate([\n      {\n        $match: {\n          name: { $regex: searchTerm, $options: \"i\" },\n        },\n      },\n      {\n        $project: {\n          _id: 1,\n          name: 1,\n          slug: 1,\n          type: { $literal: \"category\" },\n        },\n      },\n      { $limit: 3 },\n    ]);\n\n    // Get recent popular searches (you can implement this based on your analytics)\n    const popularSearches = [\n      \"bathroom fittings\",\n      \"kitchen hardware\",\n      \"door locks\",\n      \"cabinet handles\",\n      \"shower accessories\",\n    ].filter((term) =>\n      term.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    res.json({\n      suggestions: [\n        ...productSuggestions,\n        ...categorySuggestions,\n        ...popularSearches.slice(0, 2).map((term) => ({\n          name: term,\n          type: \"suggestion\",\n        })),\n      ],\n    });\n  } catch (error) {\n    console.error(\"Autocomplete search error:\", error);\n    res.status(500).json({ error: \"Search autocomplete failed\" });\n  }\n});\n\n// Advanced search with filters\nrouter.get(\"/advanced\", async (req: Request, res: Response) => {\n  try {\n    const {\n      q,\n      category,\n      minPrice,\n      maxPrice,\n      rating,\n      inStock,\n      sortBy = \"relevance\",\n      page = 1,\n      limit = 12,\n      operationType,\n      usageArea,\n      finish,\n      trackType,\n    } = req.query;\n\n    if (!getConnectionStatus()) {\n      return res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n    }\n\n    // Build search query\n    const searchQuery: any = { status: \"active\" };\n\n    // Text search\n    if (q && typeof q === \"string\" && q.trim()) {\n      searchQuery.$text = { $search: q.trim() };\n    }\n\n    // Category filter\n    if (category) {\n      if (mongoose.Types.ObjectId.isValid(category as string)) {\n        searchQuery.category = category;\n      } else {\n        const categoryDoc = await Category.findOne({ slug: category });\n        if (categoryDoc) {\n          searchQuery.category = categoryDoc._id;\n        }\n      }\n    }\n\n    // Price range filter\n    if (minPrice || maxPrice) {\n      searchQuery.price = {};\n      if (minPrice) searchQuery.price.$gte = Number(minPrice);\n      if (maxPrice) searchQuery.price.$lte = Number(maxPrice);\n    }\n\n    // Rating filter\n    if (rating) {\n      searchQuery.averageRating = { $gte: Number(rating) };\n    }\n\n    // Stock filter\n    if (inStock === \"true\") {\n      searchQuery.stock = { $gt: 0 };\n    }\n\n    // Kiti Locks specific filters\n    if (operationType) {\n      searchQuery.operationType = operationType;\n    }\n\n    if (usageArea) {\n      searchQuery.usageArea = usageArea;\n    }\n\n    if (finish) {\n      searchQuery.finish = finish;\n    }\n\n    if (trackType) {\n      searchQuery.trackType = trackType;\n    }\n\n    // Build sort options\n    let sortOptions: any = {};\n    switch (sortBy) {\n      case \"relevance\":\n        if (q) {\n          sortOptions = { score: { $meta: \"textScore\" } };\n        } else {\n          sortOptions = { featured: -1, createdAt: -1 };\n        }\n        break;\n      case \"price_low\":\n        sortOptions = { price: 1 };\n        break;\n      case \"price_high\":\n        sortOptions = { price: -1 };\n        break;\n      case \"rating\":\n        sortOptions = { averageRating: -1, reviewCount: -1 };\n        break;\n      case \"newest\":\n        sortOptions = { createdAt: -1 };\n        break;\n      case \"popular\":\n        sortOptions = { reviewCount: -1, averageRating: -1 };\n        break;\n      default:\n        sortOptions = { createdAt: -1 };\n    }\n\n    // Pagination\n    const pageNum = parseInt(page as string) || 1;\n    const limitNum = parseInt(limit as string) || 12;\n    const skip = (pageNum - 1) * limitNum;\n\n    // Execute search\n    const products = await Product.find(searchQuery)\n      .populate(\"category\", \"name slug\")\n      .sort(sortOptions)\n      .skip(skip)\n      .limit(limitNum)\n      .select(\"-__v\");\n\n    const total = await Product.countDocuments(searchQuery);\n\n    // Get available filters for the current search\n    const availableFilters = await getAvailableFilters(searchQuery);\n\n    res.json({\n      products,\n      pagination: {\n        currentPage: pageNum,\n        totalPages: Math.ceil(total / limitNum),\n        totalProducts: total,\n        hasNextPage: pageNum < Math.ceil(total / limitNum),\n        hasPrevPage: pageNum > 1,\n      },\n      filters: availableFilters,\n      searchTerm: q || \"\",\n    });\n  } catch (error) {\n    console.error(\"Advanced search error:\", error);\n    res.status(500).json({ error: \"Advanced search failed\" });\n  }\n});\n\n// Get available filters for search results\nasync function getAvailableFilters(baseQuery: any) {\n  try {\n    const [\n      categories,\n      priceRange,\n      operationTypes,\n      usageAreas,\n      finishes,\n      trackTypes,\n    ] = await Promise.all([\n      // Categories\n      Product.aggregate([\n        { $match: baseQuery },\n        { $lookup: { from: \"categories\", localField: \"category\", foreignField: \"_id\", as: \"categoryInfo\" } },\n        { $unwind: \"$categoryInfo\" },\n        { $group: { _id: \"$categoryInfo._id\", name: { $first: \"$categoryInfo.name\" }, slug: { $first: \"$categoryInfo.slug\" }, count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ]),\n      \n      // Price range\n      Product.aggregate([\n        { $match: baseQuery },\n        { $group: { _id: null, minPrice: { $min: \"$price\" }, maxPrice: { $max: \"$price\" } } },\n      ]),\n      \n      // Operation types\n      Product.aggregate([\n        { $match: { ...baseQuery, operationType: { $exists: true, $ne: null } } },\n        { $group: { _id: \"$operationType\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ]),\n      \n      // Usage areas\n      Product.aggregate([\n        { $match: { ...baseQuery, usageArea: { $exists: true, $ne: null } } },\n        { $group: { _id: \"$usageArea\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ]),\n      \n      // Finishes\n      Product.aggregate([\n        { $match: { ...baseQuery, finish: { $exists: true, $ne: null } } },\n        { $group: { _id: \"$finish\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ]),\n      \n      // Track types\n      Product.aggregate([\n        { $match: { ...baseQuery, trackType: { $exists: true, $ne: null } } },\n        { $group: { _id: \"$trackType\", count: { $sum: 1 } } },\n        { $sort: { count: -1 } },\n      ]),\n    ]);\n\n    return {\n      categories: categories.map((cat: any) => ({\n        _id: cat._id,\n        name: cat.name,\n        slug: cat.slug,\n        count: cat.count,\n      })),\n      priceRange: priceRange[0] || { minPrice: 0, maxPrice: 0 },\n      operationTypes: operationTypes.map((op: any) => ({\n        value: op._id,\n        count: op.count,\n      })),\n      usageAreas: usageAreas.map((area: any) => ({\n        value: area._id,\n        count: area.count,\n      })),\n      finishes: finishes.map((finish: any) => ({\n        value: finish._id,\n        count: finish.count,\n      })),\n      trackTypes: trackTypes.map((track: any) => ({\n        value: track._id,\n        count: track.count,\n      })),\n    };\n  } catch (error) {\n    console.error(\"Error getting available filters:\", error);\n    return {\n      categories: [],\n      priceRange: { minPrice: 0, maxPrice: 0 },\n      operationTypes: [],\n      usageAreas: [],\n      finishes: [],\n      trackTypes: [],\n    };\n  }\n}\n\n// Search history\nrouter.get(\"/history\", async (req: Request, res: Response) => {\n  try {\n    // This would typically come from user's search history stored in database\n    // For now, return popular searches\n    const popularSearches = [\n      { term: \"bathroom fittings\", count: 150 },\n      { term: \"kitchen hardware\", count: 120 },\n      { term: \"door locks\", count: 95 },\n      { term: \"cabinet handles\", count: 80 },\n      { term: \"shower accessories\", count: 70 },\n    ];\n\n    res.json({ searches: popularSearches });\n  } catch (error) {\n    console.error(\"Search history error:\", error);\n    res.status(500).json({ error: \"Failed to get search history\" });\n  }\n});\n\nexport default router;\n","import express, { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport User, { IAddress } from \"../models/User\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = express.Router();\n\n// Address validation schema\nconst addressSchema = z.object({\n  type: z.enum([\"billing\", \"shipping\"]),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  address1: z.string().min(1, \"Address line 1 is required\"),\n  address2: z.string().optional(),\n  city: z.string().min(1, \"City is required\"),\n  state: z.string().min(1, \"State is required\"),\n  zipCode: z.string().min(1, \"ZIP code is required\"),\n  country: z.string().min(1, \"Country is required\").default(\"IN\"),\n  isDefault: z.boolean().default(false),\n});\n\n// Get all user addresses\nrouter.get(\"/\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId).select(\"addresses\");\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    res.json({ addresses: user.addresses || [] });\n  } catch (error) {\n    console.error(\"Error fetching addresses:\", error);\n    res.status(500).json({ error: \"Failed to fetch addresses\" });\n  }\n});\n\n// Add new address\nrouter.post(\"/\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const validatedData = addressSchema.parse(req.body);\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    // If this is set as default, unset other defaults of the same type\n    if (validatedData.isDefault) {\n      user.addresses = user.addresses.map((addr: IAddress) =>\n        addr.type === validatedData.type ? { ...addr, isDefault: false } : addr\n      );\n    }\n\n    // If this is the first address of this type, make it default\n    const hasAddressOfType = user.addresses.some(\n      (addr: IAddress) => addr.type === validatedData.type\n    );\n    if (!hasAddressOfType) {\n      validatedData.isDefault = true;\n    }\n\n    // Add new address\n    user.addresses.push(validatedData as IAddress);\n    await user.save();\n\n    const newAddress = user.addresses[user.addresses.length - 1];\n    res.status(201).json({\n      message: \"Address added successfully\",\n      address: newAddress,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Error adding address:\", error);\n    res.status(500).json({ error: \"Failed to add address\" });\n  }\n});\n\n// Update address\nrouter.put(\"/:addressId\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    const { addressId } = req.params;\n\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const validatedData = addressSchema.parse(req.body);\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    const addressIndex = user.addresses.findIndex(\n      (addr: IAddress) => addr._id?.toString() === addressId\n    );\n\n    if (addressIndex === -1) {\n      res.status(404).json({ error: \"Address not found\" });\n      return;\n    }\n\n    // If this is set as default, unset other defaults of the same type\n    if (validatedData.isDefault) {\n      user.addresses = user.addresses.map((addr: IAddress, index: number) =>\n        addr.type === validatedData.type && index !== addressIndex\n          ? { ...addr, isDefault: false }\n          : addr\n      );\n    }\n\n    // Update the address\n    user.addresses[addressIndex] = { ...user.addresses[addressIndex], ...validatedData };\n    await user.save();\n\n    res.json({\n      message: \"Address updated successfully\",\n      address: user.addresses[addressIndex],\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Error updating address:\", error);\n    res.status(500).json({ error: \"Failed to update address\" });\n  }\n});\n\n// Delete address\nrouter.delete(\"/:addressId\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    const { addressId } = req.params;\n\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    const addressIndex = user.addresses.findIndex(\n      (addr: IAddress) => addr._id?.toString() === addressId\n    );\n\n    if (addressIndex === -1) {\n      res.status(404).json({ error: \"Address not found\" });\n      return;\n    }\n\n    const deletedAddress = user.addresses[addressIndex];\n    user.addresses.splice(addressIndex, 1);\n\n    // If deleted address was default, make another address of same type default\n    if (deletedAddress.isDefault) {\n      const sameTypeAddress = user.addresses.find(\n        (addr: IAddress) => addr.type === deletedAddress.type\n      );\n      if (sameTypeAddress) {\n        sameTypeAddress.isDefault = true;\n      }\n    }\n\n    await user.save();\n\n    res.json({ message: \"Address deleted successfully\" });\n  } catch (error) {\n    console.error(\"Error deleting address:\", error);\n    res.status(500).json({ error: \"Failed to delete address\" });\n  }\n});\n\n// Set default address\nrouter.put(\"/:addressId/default\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    const { addressId } = req.params;\n\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    const targetAddress = user.addresses.find(\n      (addr: IAddress) => addr._id?.toString() === addressId\n    );\n\n    if (!targetAddress) {\n      res.status(404).json({ error: \"Address not found\" });\n      return;\n    }\n\n    // Unset other defaults of the same type\n    user.addresses = user.addresses.map((addr: IAddress) =>\n      addr.type === targetAddress.type\n        ? { ...addr, isDefault: addr._id?.toString() === addressId }\n        : addr\n    );\n\n    await user.save();\n\n    res.json({ message: \"Default address updated successfully\" });\n  } catch (error) {\n    console.error(\"Error setting default address:\", error);\n    res.status(500).json({ error: \"Failed to set default address\" });\n  }\n});\n\nexport default router;\n","import express, { Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport { authenticateToken, AuthRequest } from \"../middleware/auth\";\nimport User from \"../models/User\";\nimport { getConnectionStatus } from \"../config/database\";\nimport bcrypt from \"bcryptjs\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { v2 as cloudinary } from \"cloudinary\";\n\nconst router = express.Router();\n\n// Configure multer for avatar uploads\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    const uploadDir = path.join(process.cwd(), 'uploads', 'avatars');\n    if (!fs.existsSync(uploadDir)) {\n      fs.mkdirSync(uploadDir, { recursive: true });\n    }\n    cb(null, uploadDir);\n  },\n  filename: (req, file, cb) => {\n    const userId = (req as AuthRequest).user?.userId;\n    const fileExtension = path.extname(file.originalname);\n    cb(null, `avatar-${userId}-${Date.now()}${fileExtension}`);\n  },\n});\n\nconst upload = multer({\n  storage,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];\n    if (allowedTypes.includes(file.mimetype)) {\n      cb(null, true);\n    } else {\n      cb(new Error('Invalid file type. Only JPG, PNG, and WebP are allowed.'));\n    }\n  },\n});\n\n// User preferences schema\nconst preferencesSchema = z.object({\n  newsletter: z.boolean().default(true),\n  notifications: z.boolean().default(true),\n  marketing: z.boolean().default(false),\n  language: z.string().default(\"en\"),\n  currency: z.string().default(\"INR\"),\n  timezone: z.string().default(\"Asia/Kolkata\"),\n});\n\n// Profile update schema\nconst profileUpdateSchema = z.object({\n  name: z.string().min(1, \"Name is required\").optional(),\n  phone: z.string().optional(),\n  location: z.string().optional(),\n  avatar: z.string().url().optional(),\n});\n\n// Password change schema\nconst passwordChangeSchema = z.object({\n  currentPassword: z.string().min(1, \"Current password is required\"),\n  newPassword: z.string().min(8, \"New password must be at least 8 characters\"),\n  confirmPassword: z.string().min(1, \"Password confirmation is required\"),\n}).refine((data) => data.newPassword === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\n// Get user settings\nrouter.get(\"/\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId).select(\"-password -__v\");\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    res.json({\n      profile: {\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        location: user.location,\n        avatar: user.avatar,\n        isVerified: user.isVerified,\n        twoFactorEnabled: user.twoFactorEnabled,\n      },\n      preferences: user.preferences || {\n        newsletter: true,\n        notifications: true,\n        marketing: false,\n        language: \"en\",\n        currency: \"INR\",\n        timezone: \"Asia/Kolkata\",\n      },\n      security: {\n        twoFactorEnabled: user.twoFactorEnabled,\n        lastLoginAt: user.lastLoginAt,\n        passwordChangedAt: user.passwordChangedAt,\n      },\n    });\n  } catch (error) {\n    console.error(\"Error fetching settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch settings\" });\n  }\n});\n\n// Update user preferences\nrouter.put(\"/preferences\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const validatedData = preferencesSchema.parse(req.body);\n\n    const user = await User.findByIdAndUpdate(\n      userId,\n      { preferences: validatedData },\n      { new: true, runValidators: true }\n    ).select(\"preferences\");\n\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    res.json({\n      message: \"Preferences updated successfully\",\n      preferences: user.preferences,\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Error updating preferences:\", error);\n    res.status(500).json({ error: \"Failed to update preferences\" });\n  }\n});\n\n// Update user profile\nrouter.put(\"/profile\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const validatedData = profileUpdateSchema.parse(req.body);\n\n    const user = await User.findByIdAndUpdate(\n      userId,\n      validatedData,\n      { new: true, runValidators: true }\n    ).select(\"-password -__v\");\n\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    res.json({\n      message: \"Profile updated successfully\",\n      profile: {\n        name: user.name,\n        email: user.email,\n        phone: user.phone,\n        location: user.location,\n        avatar: user.avatar,\n      },\n    });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Error updating profile:\", error);\n    res.status(500).json({ error: \"Failed to update profile\" });\n  }\n});\n\n// Change password\nrouter.put(\"/password\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const validatedData = passwordChangeSchema.parse(req.body);\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    // Verify current password\n    const isCurrentPasswordValid = await user.comparePassword(validatedData.currentPassword);\n    if (!isCurrentPasswordValid) {\n      res.status(400).json({ error: \"Current password is incorrect\" });\n      return;\n    }\n\n    // Hash new password\n    const salt = await bcrypt.genSalt(12);\n    const hashedNewPassword = await bcrypt.hash(validatedData.newPassword, salt);\n\n    // Update password\n    user.password = hashedNewPassword;\n    user.passwordChangedAt = new Date();\n    await user.save();\n\n    res.json({ message: \"Password changed successfully\" });\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      res.status(400).json({\n        error: \"Validation failed\",\n        details: error.errors,\n      });\n      return;\n    }\n\n    console.error(\"Error changing password:\", error);\n    res.status(500).json({ error: \"Failed to change password\" });\n  }\n});\n\n// Enable/Disable two-factor authentication\nrouter.put(\"/2fa\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    const { enabled, secret, backupCodes } = req.body;\n\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    if (enabled) {\n      // Enable 2FA\n      if (!secret) {\n        res.status(400).json({ error: \"2FA secret is required\" });\n        return;\n      }\n\n      user.twoFactorEnabled = true;\n      user.twoFactorSecret = secret;\n      user.backupCodes = backupCodes || [];\n    } else {\n      // Disable 2FA\n      user.twoFactorEnabled = false;\n      user.twoFactorSecret = undefined;\n      user.backupCodes = undefined;\n    }\n\n    await user.save();\n\n    res.json({\n      message: `Two-factor authentication ${enabled ? 'enabled' : 'disabled'} successfully`,\n      twoFactorEnabled: user.twoFactorEnabled,\n    });\n  } catch (error) {\n    console.error(\"Error updating 2FA:\", error);\n    res.status(500).json({ error: \"Failed to update two-factor authentication\" });\n  }\n});\n\n// Request account data export\nrouter.post(\"/export\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    // In a real implementation, this would:\n    // 1. Queue a background job to prepare the data export\n    // 2. Send an email when ready\n    // 3. Provide a secure download link\n\n    res.json({\n      message: \"Data export request received. You will receive an email when your data is ready for download.\",\n      estimatedTime: \"24-48 hours\",\n    });\n  } catch (error) {\n    console.error(\"Error requesting data export:\", error);\n    res.status(500).json({ error: \"Failed to request data export\" });\n  }\n});\n\n// Request account deletion\nrouter.post(\"/delete-account\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    const { password, reason } = req.body;\n\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    if (!password) {\n      res.status(400).json({ error: \"Password is required to delete account\" });\n      return;\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    // Verify password\n    const isPasswordValid = await user.comparePassword(password);\n    if (!isPasswordValid) {\n      res.status(400).json({ error: \"Password is incorrect\" });\n      return;\n    }\n\n    // In a real implementation, this would:\n    // 1. Queue a background job to handle account deletion\n    // 2. Send confirmation email\n    // 3. Allow a grace period before actual deletion\n    // 4. Anonymize or delete user data according to GDPR\n\n    res.json({\n      message: \"Account deletion request received. You will receive a confirmation email.\",\n      deletionDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n    });\n  } catch (error) {\n    console.error(\"Error requesting account deletion:\", error);\n    res.status(500).json({ error: \"Failed to request account deletion\" });\n  }\n});\n\n// Get notification settings\nrouter.get(\"/notifications\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    // This would typically come from a separate notifications settings table\n    // For now, return default settings\n    const notificationSettings = {\n      email: {\n        orderUpdates: true,\n        promotions: false,\n        newsletter: true,\n        security: true,\n      },\n      sms: {\n        orderUpdates: true,\n        promotions: false,\n        security: true,\n      },\n      push: {\n        orderUpdates: true,\n        promotions: false,\n        newProducts: false,\n      },\n    };\n\n    res.json({ notifications: notificationSettings });\n  } catch (error) {\n    console.error(\"Error fetching notification settings:\", error);\n    res.status(500).json({ error: \"Failed to fetch notification settings\" });\n  }\n});\n\n// Update notification settings\nrouter.put(\"/notifications\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    // In a real implementation, you'd validate and save these settings\n    const { email, sms, push } = req.body;\n\n    res.json({\n      message: \"Notification settings updated successfully\",\n      notifications: { email, sms, push },\n    });\n  } catch (error) {\n    console.error(\"Error updating notification settings:\", error);\n    res.status(500).json({ error: \"Failed to update notification settings\" });\n  }\n});\n\n// Upload avatar\nrouter.post(\"/avatar\", authenticateToken, upload.single('avatar'), async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    if (!req.file) {\n      res.status(400).json({ error: \"No image file provided\" });\n      return;\n    }\n\n    try {\n      // Upload to Cloudinary if configured\n      if (process.env.CLOUDINARY_CLOUD_NAME && process.env.CLOUDINARY_API_KEY && process.env.CLOUDINARY_API_SECRET) {\n        const result = await cloudinary.uploader.upload(req.file.path, {\n          folder: 'kiti-locks/avatars',\n          public_id: `avatar-${userId}`,\n          transformation: [\n            { width: 400, height: 400, crop: 'fill', gravity: 'face' },\n            { quality: 'auto', fetch_format: 'auto' }\n          ]\n        });\n\n        // Delete local file after upload\n        fs.unlinkSync(req.file.path);\n\n        // Update user avatar URL in database\n        await User.findByIdAndUpdate(userId, { avatar: result.secure_url });\n\n        res.json({\n          message: \"Avatar uploaded successfully\",\n          avatar: result.secure_url,\n        });\n      } else {\n        // Fallback to local storage\n        const avatarUrl = `/uploads/avatars/${req.file.filename}`;\n        await User.findByIdAndUpdate(userId, { avatar: avatarUrl });\n\n        res.json({\n          message: \"Avatar uploaded successfully\",\n          avatar: avatarUrl,\n        });\n      }\n    } catch (uploadError) {\n      console.error(\"Avatar upload error:\", uploadError);\n      // Clean up local file if it exists\n      if (req.file && fs.existsSync(req.file.path)) {\n        fs.unlinkSync(req.file.path);\n      }\n      res.status(500).json({ error: \"Failed to upload avatar\" });\n    }\n  } catch (error) {\n    console.error(\"Error uploading avatar:\", error);\n    res.status(500).json({ error: \"Failed to upload avatar\" });\n  }\n});\n\n// Delete avatar\nrouter.delete(\"/avatar\", authenticateToken, async (req: Request, res: Response): Promise<void> => {\n  try {\n    if (!getConnectionStatus()) {\n      res.status(503).json({\n        error: \"Database connection required. Please ensure MongoDB is connected.\",\n      });\n      return;\n    }\n\n    const userId = (req as AuthRequest).user?.userId;\n    if (!userId) {\n      res.status(401).json({ error: \"User not authenticated\" });\n      return;\n    }\n\n    const user = await User.findById(userId);\n    if (!user) {\n      res.status(404).json({ error: \"User not found\" });\n      return;\n    }\n\n    // If user has an avatar, try to delete it from Cloudinary or local storage\n    if (user.avatar) {\n      try {\n        if (user.avatar.includes('cloudinary.com')) {\n          // Extract public_id from Cloudinary URL and delete\n          const publicId = user.avatar.split('/').pop()?.split('.')[0];\n          if (publicId) {\n            await cloudinary.uploader.destroy(`kiti-locks/avatars/${publicId}`);\n          }\n        } else if (user.avatar.startsWith('/uploads/')) {\n          // Delete local file\n          const filePath = path.join(process.cwd(), user.avatar);\n          if (fs.existsSync(filePath)) {\n            fs.unlinkSync(filePath);\n          }\n        }\n      } catch (deleteError) {\n        console.error(\"Error deleting avatar file:\", deleteError);\n        // Continue with database update even if file deletion fails\n      }\n    }\n\n    // Remove avatar from database\n    await User.findByIdAndUpdate(userId, { $unset: { avatar: 1 } });\n\n    res.json({ message: \"Avatar removed successfully\" });\n  } catch (error) {\n    console.error(\"Error removing avatar:\", error);\n    res.status(500).json({ error: \"Failed to remove avatar\" });\n  }\n});\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport User from \"../models/User\";\nimport Order from \"../models/Order\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n} from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = Router();\n\nconst updateUserSchema = z.object({\n  name: z.string().min(1, \"Name is required\").optional(),\n  email: z.string().email(\"Invalid email format\").optional(),\n  role: z.enum([\"user\", \"admin\"]).optional(),\n  isActive: z.boolean().optional(),\n});\n\n// Get all users (admin only)\nrouter.get(\n  \"/\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { page = 1, limit = 10, search, role, isActive } = req.query;\n      const pageNum = parseInt(page as string);\n      const limitNum = parseInt(limit as string);\n      const skip = (pageNum - 1) * limitNum;\n\n      // Build filter object\n      const filter: any = {};\n      \n      if (search) {\n        filter.$or = [\n          { name: { $regex: search, $options: \"i\" } },\n          { email: { $regex: search, $options: \"i\" } },\n        ];\n      }\n      \n      if (role && role !== \"all\") {\n        filter.role = role;\n      }\n      \n      if (isActive !== undefined && isActive !== \"all\") {\n        filter.isActive = isActive === \"true\";\n      }\n\n      const [users, totalUsers] = await Promise.all([\n        User.find(filter)\n          .select(\"-password -twoFactorSecret\")\n          .sort({ createdAt: -1 })\n          .skip(skip)\n          .limit(limitNum),\n        User.countDocuments(filter),\n      ]);\n\n      // Get user statistics\n      const userStats = await User.aggregate([\n        {\n          $group: {\n            _id: \"$role\",\n            count: { $sum: 1 },\n          },\n        },\n      ]);\n\n      const activeUsers = await User.countDocuments({ isActive: { $ne: false } });\n      const inactiveUsers = await User.countDocuments({ isActive: false });\n\n      res.json({\n        users,\n        pagination: {\n          currentPage: pageNum,\n          totalPages: Math.ceil(totalUsers / limitNum),\n          totalUsers,\n          hasNext: pageNum * limitNum < totalUsers,\n          hasPrev: pageNum > 1,\n        },\n        stats: {\n          total: totalUsers,\n          active: activeUsers,\n          inactive: inactiveUsers,\n          byRole: userStats.reduce((acc: Record<string, number>, stat: any) => {\n            acc[stat._id] = stat.count;\n            return acc;\n          }, {} as Record<string, number>),\n        },\n      });\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  },\n);\n\n// Get user details with order history (admin only)\nrouter.get(\n  \"/:userId\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { userId } = req.params;\n\n      const user = await User.findById(userId)\n        .select(\"-password -twoFactorSecret\")\n        .populate(\"wishlist\", \"name price images slug\");\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      // Get user's order history\n      const orders = await Order.find({ user: userId })\n        .populate(\"items.product\", \"name price\")\n        .sort({ createdAt: -1 })\n        .limit(10);\n\n      // Calculate user statistics\n      const orderStats = await Order.aggregate([\n        { $match: { user: user._id } },\n        {\n          $group: {\n            _id: null,\n            totalOrders: { $sum: 1 },\n            totalSpent: { $sum: \"$total\" },\n            averageOrderValue: { $avg: \"$total\" },\n          },\n        },\n      ]);\n\n      const stats = orderStats[0] || {\n        totalOrders: 0,\n        totalSpent: 0,\n        averageOrderValue: 0,\n      };\n\n      res.json({\n        user,\n        orders,\n        stats,\n      });\n    } catch (error) {\n      console.error(\"Get user details error:\", error);\n      res.status(500).json({ error: \"Failed to fetch user details\" });\n    }\n  },\n);\n\n// Update user (admin only)\nrouter.put(\n  \"/:userId\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { userId } = req.params;\n      const validatedData = updateUserSchema.parse(req.body);\n\n      // Prevent admin from changing their own role\n      const currentUser = (req as AuthRequest).user;\n      if (currentUser?.userId === userId && validatedData.role) {\n        res.status(400).json({ error: \"Cannot change your own role\" });\n        return;\n      }\n\n      // Check if email is already taken by another user\n      if (validatedData.email) {\n        const existingUser = await User.findOne({\n          email: validatedData.email,\n          _id: { $ne: userId },\n        });\n        if (existingUser) {\n          res.status(400).json({ error: \"Email already exists\" });\n          return;\n        }\n      }\n\n      const user = await User.findByIdAndUpdate(\n        userId,\n        validatedData,\n        { new: true, runValidators: true }\n      ).select(\"-password -twoFactorSecret\");\n\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      res.json({\n        message: \"User updated successfully\",\n        user,\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  },\n);\n\n// Delete user (admin only)\nrouter.delete(\n  \"/:userId\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { userId } = req.params;\n      const currentUser = (req as AuthRequest).user;\n\n      // Prevent admin from deleting themselves\n      if (currentUser?.userId === userId) {\n        res.status(400).json({ error: \"Cannot delete your own account\" });\n        return;\n      }\n\n      const user = await User.findById(userId);\n      if (!user) {\n        res.status(404).json({ error: \"User not found\" });\n        return;\n      }\n\n      // Check if user has orders\n      const hasOrders = await Order.countDocuments({ user: userId });\n      if (hasOrders > 0) {\n        // Instead of deleting, deactivate the user\n        user.isActive = false;\n        await user.save();\n        res.json({\n          message: \"User deactivated successfully (has order history)\",\n          user: { ...user.toObject(), password: undefined, twoFactorSecret: undefined },\n        });\n      } else {\n        // Safe to delete if no orders\n        await User.findByIdAndDelete(userId);\n        res.json({ message: \"User deleted successfully\" });\n      }\n    } catch (error) {\n      console.error(\"Delete user error:\", error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  },\n);\n\n// Get user analytics (admin only)\nrouter.get(\n  \"/analytics/overview\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { period = \"30\" } = req.query;\n      const days = parseInt(period as string);\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      // User registration trends\n      const registrationTrends = await User.aggregate([\n        {\n          $match: {\n            createdAt: { $gte: startDate },\n          },\n        },\n        {\n          $group: {\n            _id: {\n              year: { $year: \"$createdAt\" },\n              month: { $month: \"$createdAt\" },\n              day: { $dayOfMonth: \"$createdAt\" },\n            },\n            count: { $sum: 1 },\n          },\n        },\n        {\n          $sort: {\n            \"_id.year\": 1,\n            \"_id.month\": 1,\n            \"_id.day\": 1,\n          },\n        },\n      ]);\n\n      // User activity metrics\n      const totalUsers = await User.countDocuments();\n      const activeUsers = await User.countDocuments({ isActive: { $ne: false } });\n      const newUsersThisMonth = await User.countDocuments({\n        createdAt: {\n          $gte: new Date(new Date().getFullYear(), new Date().getMonth(), 1),\n        },\n      });\n\n      // Top customers by order value\n      const topCustomers = await Order.aggregate([\n        {\n          $group: {\n            _id: \"$user\",\n            totalSpent: { $sum: \"$total\" },\n            orderCount: { $sum: 1 },\n          },\n        },\n        {\n          $lookup: {\n            from: \"users\",\n            localField: \"_id\",\n            foreignField: \"_id\",\n            as: \"user\",\n          },\n        },\n        {\n          $unwind: \"$user\",\n        },\n        {\n          $project: {\n            name: \"$user.name\",\n            email: \"$user.email\",\n            totalSpent: 1,\n            orderCount: 1,\n          },\n        },\n        {\n          $sort: { totalSpent: -1 },\n        },\n        {\n          $limit: 10,\n        },\n      ]);\n\n      res.json({\n        totalUsers,\n        activeUsers,\n        newUsersThisMonth,\n        registrationTrends,\n        topCustomers,\n      });\n    } catch (error) {\n      console.error(\"Get user analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch user analytics\" });\n    }\n  },\n);\n\nexport default router;\n","import { Router, Request, Response } from \"express\";\nimport { z } from \"zod\";\nimport Product from \"../models/Product\";\nimport Order from \"../models/Order\";\nimport {\n  authenticateToken,\n  requireAdmin,\n  AuthRequest,\n} from \"../middleware/auth\";\nimport { getConnectionStatus } from \"../config/database\";\n\nconst router = Router();\n\nconst inventoryUpdateSchema = z.object({\n  productId: z.string().min(1, \"Product ID is required\"),\n  quantity: z.number().min(0, \"Quantity must be non-negative\"),\n  reason: z.string().min(1, \"Reason is required\"),\n  notes: z.string().optional(),\n});\n\nconst bulkInventoryUpdateSchema = z.object({\n  updates: z.array(z.object({\n    productId: z.string().min(1, \"Product ID is required\"),\n    quantity: z.number().min(0, \"Quantity must be non-negative\"),\n    reason: z.string().min(1, \"Reason is required\"),\n  })),\n});\n\n// Get inventory overview (admin only)\nrouter.get(\n  \"/overview\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { category, status = \"active\", lowStock = \"10\" } = req.query;\n      const lowStockThreshold = parseInt(lowStock as string);\n\n      // Build filter\n      const filter: any = {};\n      if (status !== \"all\") {\n        filter.status = status;\n      }\n      if (category && category !== \"all\") {\n        filter.category = category;\n      }\n\n      // Get inventory data\n      const products = await Product.find(filter)\n        .populate(\"category\", \"name\")\n        .select(\"name slug price stock status category images\")\n        .sort({ stock: 1 });\n\n      // Calculate inventory statistics\n      const totalProducts = products.length;\n      const lowStockProducts = products.filter(p => p.stock <= lowStockThreshold);\n      const outOfStockProducts = products.filter(p => p.stock === 0);\n      const totalInventoryValue = products.reduce((sum, product) => sum + (product.price * product.stock), 0);\n\n      // Get stock movement data (from recent orders)\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const stockMovements = await Order.aggregate([\n        {\n          $match: {\n            createdAt: { $gte: thirtyDaysAgo },\n            status: { $ne: \"cancelled\" }\n          }\n        },\n        {\n          $unwind: \"$items\"\n        },\n        {\n          $group: {\n            _id: \"$items.product\",\n            totalSold: { $sum: \"$items.quantity\" },\n            revenue: { $sum: { $multiply: [\"$items.quantity\", \"$items.price\"] } }\n          }\n        },\n        {\n          $lookup: {\n            from: \"products\",\n            localField: \"_id\",\n            foreignField: \"_id\",\n            as: \"product\"\n          }\n        },\n        {\n          $unwind: \"$product\"\n        },\n        {\n          $project: {\n            name: \"$product.name\",\n            slug: \"$product.slug\",\n            currentStock: \"$product.stock\",\n            totalSold: 1,\n            revenue: 1,\n            turnoverRate: {\n              $cond: {\n                if: { $gt: [\"$product.stock\", 0] },\n                then: { $divide: [\"$totalSold\", \"$product.stock\"] },\n                else: 0\n              }\n            }\n          }\n        },\n        {\n          $sort: { totalSold: -1 }\n        },\n        {\n          $limit: 20\n        }\n      ]);\n\n      res.json({\n        products,\n        statistics: {\n          totalProducts,\n          lowStockCount: lowStockProducts.length,\n          outOfStockCount: outOfStockProducts.length,\n          totalInventoryValue,\n          lowStockThreshold,\n        },\n        lowStockProducts: lowStockProducts.slice(0, 10),\n        outOfStockProducts: outOfStockProducts.slice(0, 10),\n        topMovingProducts: stockMovements,\n      });\n    } catch (error) {\n      console.error(\"Get inventory overview error:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory overview\" });\n    }\n  },\n);\n\n// Update product stock (admin only)\nrouter.put(\n  \"/stock/update\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const validatedData = inventoryUpdateSchema.parse(req.body);\n      const { productId, quantity, reason, notes } = validatedData;\n\n      const product = await Product.findById(productId);\n      if (!product) {\n        res.status(404).json({ error: \"Product not found\" });\n        return;\n      }\n\n      const oldStock = product.stock;\n      product.stock = quantity;\n      await product.save();\n\n      // Log the inventory change (in a real app, you'd have an InventoryLog model)\n      console.log(`Inventory Update: ${product.name} stock changed from ${oldStock} to ${quantity}. Reason: ${reason}. Notes: ${notes || 'None'}`);\n\n      res.json({\n        message: \"Stock updated successfully\",\n        product: {\n          _id: product._id,\n          name: product.name,\n          slug: product.slug,\n          oldStock,\n          newStock: quantity,\n          difference: quantity - oldStock,\n        },\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Update stock error:\", error);\n      res.status(500).json({ error: \"Failed to update stock\" });\n    }\n  },\n);\n\n// Bulk update product stock (admin only)\nrouter.put(\n  \"/stock/bulk-update\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const validatedData = bulkInventoryUpdateSchema.parse(req.body);\n      const { updates } = validatedData;\n\n      const results = [];\n\n      for (const update of updates) {\n        try {\n          const product = await Product.findById(update.productId);\n          if (!product) {\n            results.push({\n              productId: update.productId,\n              success: false,\n              error: \"Product not found\",\n            });\n            continue;\n          }\n\n          const oldStock = product.stock;\n          product.stock = update.quantity;\n          await product.save();\n\n          results.push({\n            productId: update.productId,\n            name: product.name,\n            success: true,\n            oldStock,\n            newStock: update.quantity,\n            difference: update.quantity - oldStock,\n          });\n\n          // Log the inventory change\n          console.log(`Bulk Inventory Update: ${product.name} stock changed from ${oldStock} to ${update.quantity}. Reason: ${update.reason}`);\n        } catch (error) {\n          results.push({\n            productId: update.productId,\n            success: false,\n            error: \"Failed to update\",\n          });\n        }\n      }\n\n      const successCount = results.filter(r => r.success).length;\n      const failedCount = results.filter(r => !r.success).length;\n\n      res.json({\n        message: `Bulk update completed: ${successCount} successful, ${failedCount} failed`,\n        results,\n        summary: {\n          total: updates.length,\n          successful: successCount,\n          failed: failedCount,\n        },\n      });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          error: \"Validation failed\",\n          details: error.errors,\n        });\n        return;\n      }\n\n      console.error(\"Bulk update stock error:\", error);\n      res.status(500).json({ error: \"Failed to perform bulk update\" });\n    }\n  },\n);\n\n// Get low stock alerts (admin only)\nrouter.get(\n  \"/alerts/low-stock\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { threshold = \"10\" } = req.query;\n      const lowStockThreshold = parseInt(threshold as string);\n\n      const lowStockProducts = await Product.find({\n        stock: { $lte: lowStockThreshold },\n        status: \"active\",\n      })\n        .populate(\"category\", \"name\")\n        .select(\"name slug stock price category images\")\n        .sort({ stock: 1 });\n\n      // Calculate recommended reorder quantities based on sales velocity\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n      const salesData = await Order.aggregate([\n        {\n          $match: {\n            createdAt: { $gte: thirtyDaysAgo },\n            status: { $ne: \"cancelled\" }\n          }\n        },\n        {\n          $unwind: \"$items\"\n        },\n        {\n          $group: {\n            _id: \"$items.product\",\n            totalSold: { $sum: \"$items.quantity\" },\n            averageDailySales: { $avg: \"$items.quantity\" }\n          }\n        }\n      ]);\n\n      const salesMap = new Map(salesData.map((item: any) => [item._id.toString(), item]));\n\n      const alertsWithRecommendations = lowStockProducts.map(product => {\n        const sales = salesMap.get(product._id.toString()) as any;\n        const dailyVelocity = sales ? sales.totalSold / 30 : 0;\n        const recommendedReorder = Math.max(Math.ceil(dailyVelocity * 30), 10); // 30 days of stock\n\n        return {\n          ...product.toObject(),\n          dailyVelocity: Math.round(dailyVelocity * 100) / 100,\n          recommendedReorder,\n          daysUntilOutOfStock: dailyVelocity > 0 ? Math.floor(product.stock / dailyVelocity) : null,\n        };\n      });\n\n      res.json({\n        alerts: alertsWithRecommendations,\n        summary: {\n          total: lowStockProducts.length,\n          critical: lowStockProducts.filter(p => p.stock === 0).length,\n          warning: lowStockProducts.filter(p => p.stock > 0 && p.stock <= 5).length,\n          low: lowStockProducts.filter(p => p.stock > 5).length,\n        },\n        threshold: lowStockThreshold,\n      });\n    } catch (error) {\n      console.error(\"Get low stock alerts error:\", error);\n      res.status(500).json({ error: \"Failed to fetch low stock alerts\" });\n    }\n  },\n);\n\n// Get inventory analytics (admin only)\nrouter.get(\n  \"/analytics\",\n  authenticateToken,\n  requireAdmin,\n  async (req: Request, res: Response): Promise<void> => {\n    try {\n      if (!getConnectionStatus()) {\n        res.status(503).json({ error: \"Database connection required\" });\n        return;\n      }\n\n      const { period = \"30\" } = req.query;\n      const days = parseInt(period as string);\n      const startDate = new Date();\n      startDate.setDate(startDate.getDate() - days);\n\n      // Inventory turnover analysis\n      const inventoryAnalysis = await Product.aggregate([\n        {\n          $lookup: {\n            from: \"orders\",\n            let: { productId: \"$_id\" },\n            pipeline: [\n              {\n                $match: {\n                  createdAt: { $gte: startDate },\n                  status: { $ne: \"cancelled\" }\n                }\n              },\n              {\n                $unwind: \"$items\"\n              },\n              {\n                $match: {\n                  $expr: { $eq: [\"$items.product\", \"$$productId\"] }\n                }\n              },\n              {\n                $group: {\n                  _id: null,\n                  totalSold: { $sum: \"$items.quantity\" },\n                  revenue: { $sum: { $multiply: [\"$items.quantity\", \"$items.price\"] } }\n                }\n              }\n            ],\n            as: \"sales\"\n          }\n        },\n        {\n          $addFields: {\n            totalSold: { $ifNull: [{ $arrayElemAt: [\"$sales.totalSold\", 0] }, 0] },\n            revenue: { $ifNull: [{ $arrayElemAt: [\"$sales.revenue\", 0] }, 0] },\n            turnoverRate: {\n              $cond: {\n                if: { $gt: [\"$stock\", 0] },\n                then: { $divide: [{ $ifNull: [{ $arrayElemAt: [\"$sales.totalSold\", 0] }, 0] }, \"$stock\"] },\n                else: 0\n              }\n            },\n            inventoryValue: { $multiply: [\"$stock\", \"$price\"] }\n          }\n        },\n        {\n          $project: {\n            name: 1,\n            slug: 1,\n            stock: 1,\n            price: 1,\n            totalSold: 1,\n            revenue: 1,\n            turnoverRate: 1,\n            inventoryValue: 1,\n            category: 1\n          }\n        },\n        {\n          $sort: { turnoverRate: -1 }\n        }\n      ]);\n\n      // Category-wise inventory summary\n      const categoryAnalysis = await Product.aggregate([\n        {\n          $lookup: {\n            from: \"categories\",\n            localField: \"category\",\n            foreignField: \"_id\",\n            as: \"categoryInfo\"\n          }\n        },\n        {\n          $unwind: \"$categoryInfo\"\n        },\n        {\n          $group: {\n            _id: \"$categoryInfo.name\",\n            totalProducts: { $sum: 1 },\n            totalStock: { $sum: \"$stock\" },\n            totalValue: { $sum: { $multiply: [\"$stock\", \"$price\"] } },\n            averagePrice: { $avg: \"$price\" },\n            lowStockCount: {\n              $sum: {\n                $cond: [{ $lte: [\"$stock\", 10] }, 1, 0]\n              }\n            }\n          }\n        },\n        {\n          $sort: { totalValue: -1 }\n        }\n      ]);\n\n      const totalInventoryValue = inventoryAnalysis.reduce((sum, product) => sum + product.inventoryValue, 0);\n      const totalProductsSold = inventoryAnalysis.reduce((sum, product) => sum + product.totalSold, 0);\n      const totalRevenue = inventoryAnalysis.reduce((sum, product) => sum + product.revenue, 0);\n\n      res.json({\n        summary: {\n          totalInventoryValue,\n          totalProductsSold,\n          totalRevenue,\n          averageTurnoverRate: inventoryAnalysis.length > 0 \n            ? inventoryAnalysis.reduce((sum, p) => sum + p.turnoverRate, 0) / inventoryAnalysis.length \n            : 0,\n        },\n        products: inventoryAnalysis,\n        categoryBreakdown: categoryAnalysis,\n        topPerformers: inventoryAnalysis.slice(0, 10),\n        slowMovers: inventoryAnalysis.filter(p => p.turnoverRate < 0.1).slice(0, 10),\n      });\n    } catch (error) {\n      console.error(\"Get inventory analytics error:\", error);\n      res.status(500).json({ error: \"Failed to fetch inventory analytics\" });\n    }\n  },\n);\n\nexport default router;\n","import express from \"express\";\nimport cors from \"cors\";\nimport session from \"express-session\";\nimport passport from \"./config/passport\";\nimport connectDB from \"./config/database\";\nimport authRoutes from \"./routes/auth\";\nimport productRoutes from \"./routes/products\";\nimport categoryRoutes from \"./routes/categories\";\nimport cartRoutes from \"./routes/cart\";\nimport wishlistRoutes from \"./routes/wishlist\";\nimport uploadRoutes from \"./routes/upload\";\nimport orderRoutes from \"./routes/orders\";\nimport checkoutRoutes from \"./routes/checkout\";\nimport reviewRoutes from \"./routes/reviews\";\nimport analyticsRoutes from \"./routes/analytics\";\nimport shiprocketRoutes from \"./routes/shiprocketRoutes\";\nimport searchRoutes from \"./routes/search\";\nimport addressRoutes from \"./routes/addresses\";\nimport settingsRoutes from \"./routes/settings\";\nimport usersRoutes from \"./routes/users\";\nimport inventoryRoutes from \"./routes/inventory\";\n\nexport function createServer() {\n  const app = express();\n\n  // Try to connect to MongoDB (non-blocking)\n  connectDB().catch(console.warn);\n\n  // Security middleware\n  // Force HTTPS in production\n  if (process.env.NODE_ENV === \"production\") {\n    app.use((req, res, next) => {\n      if (req.header(\"x-forwarded-proto\") !== \"https\") {\n        res.redirect(`https://${req.header(\"host\")}${req.url}`);\n        return;\n      }\n      next();\n    });\n  }\n\n  // Security headers\n  app.use((req, res, next) => {\n    // HTTPS-only and security headers\n    res.setHeader(\n      \"Strict-Transport-Security\",\n      \"max-age=31536000; includeSubDomains; preload\",\n    );\n\n    // Content Security Policy\n    res.setHeader(\n      \"Content-Security-Policy\",\n      \"default-src 'self'; \" +\n        \"script-src 'self' 'unsafe-inline' 'unsafe-eval' https://checkout.razorpay.com https://edge.fullstory.com https://accounts.google.com; \" +\n        \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://accounts.google.com; \" +\n        \"img-src 'self' data: blob: https: http:; \" +\n        \"font-src 'self' https://fonts.gstatic.com; \" +\n        \"connect-src 'self' https://api.razorpay.com https://checkout.razorpay.com https://lumberjack.razorpay.com https://accounts.google.com https://oauth2.googleapis.com; \" +\n        \"frame-src 'self' https://checkout.razorpay.com https://api.razorpay.com https://accounts.google.com; \" +\n        \"object-src 'none'; \" +\n        \"base-uri 'self'; \" +\n        \"form-action 'self';\",\n    );\n\n    // Other security headers\n    res.setHeader(\"X-Frame-Options\", \"DENY\");\n    res.setHeader(\"X-Content-Type-Options\", \"nosniff\");\n    res.setHeader(\"Referrer-Policy\", \"strict-origin-when-cross-origin\");\n    res.setHeader(\n      \"Permissions-Policy\",\n      \"camera=(), microphone=(), geolocation=()\",\n    );\n\n    next();\n  });\n\n  // Rate limiting middleware (disabled in development)\n  if (process.env.NODE_ENV === \"production\") {\n    const rateLimit = new Map();\n    app.use((req, res, next) => {\n      const ip = req.ip || req.connection.remoteAddress;\n      const now = Date.now();\n      const windowMs = 15 * 60 * 1000; // 15 minutes\n      const maxRequests = 100; // Max requests per window\n\n      if (!rateLimit.has(ip)) {\n        rateLimit.set(ip, { count: 1, resetTime: now + windowMs });\n        return next();\n      }\n\n      const userLimit = rateLimit.get(ip);\n\n      if (now > userLimit.resetTime) {\n        rateLimit.set(ip, { count: 1, resetTime: now + windowMs });\n        return next();\n      }\n\n      if (userLimit.count >= maxRequests) {\n        return res.status(429).json({\n          error: \"Too many requests, please try again later.\",\n        });\n      }\n\n      userLimit.count++;\n      next();\n    });\n  }\n\n  // CORS with security considerations\n  app.use(\n    cors({\n      origin:\n        process.env.NODE_ENV === \"production\"\n          ? [\"http://localhost:8081\",\"http://127.0.0.1:8081\"]\n          : [\"http://localhost:8080\", \"http://127.0.0.1:8080\"],\n      credentials: true,\n      optionsSuccessStatus: 200,\n    }),\n  );\n\n  // Body parsing with security limits\n  app.use(express.json({ limit: \"2mb\" })); // Reduced from 10mb for security\n  app.use(express.urlencoded({ extended: true, limit: \"2mb\" }));\n\n  // Static asset caching headers\n  app.use(\"/assets\", (req, res, next) => {\n    // Cache static assets for 1 year\n    res.setHeader(\"Cache-Control\", \"public, max-age=31536000, immutable\");\n    res.setHeader(\"Expires\", new Date(Date.now() + 31536000000).toUTCString());\n    next();\n  });\n\n  // Font caching\n  app.use(\"/fonts\", (req, res, next) => {\n    res.setHeader(\"Cache-Control\", \"public, max-age=31536000, immutable\");\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    next();\n  });\n\n  // Image caching\n  app.use((req, res, next) => {\n    if (req.url.match(/\\.(jpg|jpeg|png|gif|webp|svg|ico)$/i)) {\n      res.setHeader(\"Cache-Control\", \"public, max-age=31536000, immutable\");\n      res.setHeader(\n        \"Expires\",\n        new Date(Date.now() + 31536000000).toUTCString(),\n      );\n    }\n    next();\n  });\n\n  // Serve uploaded files (avatars, etc.)\n  app.use('/uploads', express.static('uploads', {\n    maxAge: '1d', // Cache uploaded images for 1 day\n    setHeaders: (res, path) => {\n      if (path.match(/\\.(jpg|jpeg|png|gif|webp)$/i)) {\n        res.setHeader('Cache-Control', 'public, max-age=86400'); // 1 day\n      }\n    }\n  }));\n\n  // Session middleware\n  app.use(\n    session({\n      secret: process.env.JWT_SECRET || \"session-secret\",\n      resave: false,\n      saveUninitialized: false,\n      cookie: {\n        secure: process.env.NODE_ENV === \"production\",\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\n      },\n    }),\n  );\n\n  // Passport middleware\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // API routes\n  app.get(\"/api/ping\", (_req, res) => {\n    res.json({ message: \"E-commerce API is running!\" });\n  });\n\n  // Authentication routes\n  app.use(\"/api/auth\", authRoutes);\n\n  // Product routes\n  app.use(\"/api/products\", productRoutes);\n\n  // Category routes\n  app.use(\"/api/categories\", categoryRoutes);\n\n  // Cart routes\n  app.use(\"/api/cart\", cartRoutes);\n\n  // Wishlist routes\n  app.use(\"/api/wishlist\", wishlistRoutes);\n\n  // Upload routes\n  app.use(\"/api/upload\", uploadRoutes);\n\n  // Orders routes\n  app.use(\"/api/orders\", orderRoutes);\n\n  // Checkout routes\n  app.use(\"/api/checkout\", checkoutRoutes);\n\n  // Review routes\n  app.use(\"/api/reviews\", reviewRoutes);\n\n  // Search routes\n  app.use(\"/api/search\", searchRoutes);\n\n  // Address routes\n  app.use(\"/api/addresses\", addressRoutes);\n\n  // User settings routes\n  app.use(\"/api/settings\", settingsRoutes);\n\n  // Analytics routes\n  app.use(\"/api/analytics\", analyticsRoutes);\n\n  // Users management routes (admin only)\n  app.use(\"/api/users\", usersRoutes);\n\n  // Inventory management routes (admin only)\n  app.use(\"/api/inventory\", inventoryRoutes);\n\n  // Shiprocket routes\n  app.use(\"/api/shiprocket\", shiprocketRoutes);\n\n  // Error handling middleware\n  app.use(\n    (\n      err: any,\n      req: express.Request,\n      res: express.Response,\n      next: express.NextFunction,\n    ) => {\n      console.error(\"Error:\", err);\n      res.status(500).json({\n        error: \"Internal server error\",\n        message:\n          process.env.NODE_ENV === \"development\"\n            ? err.message\n            : \"Something went wrong\",\n      });\n    },\n  );\n\n  return app;\n}\n","import path from \"path\";\nimport { createServer } from \"./index\";\nimport * as express from \"express\";\n\nconst app = createServer();\nconst port = process.env.PORT || 3000;\n\n// In production, serve the built SPA files\nconst __dirname = import.meta.dirname;\nconst distPath = path.join(__dirname, \"../spa\");\n\n// Serve static files\napp.use(express.static(distPath));\n\n// Handle React Router - serve index.html for all non-API routes\napp.get(\"*\", (req, res) => {\n  // Don't serve index.html for API routes\n  if (req.path.startsWith(\"/api/\") || req.path.startsWith(\"/health\")) {\n    return res.status(404).json({ error: \"API endpoint not found\" });\n  }\n\n  res.sendFile(path.join(distPath, \"index.html\"));\n});\n\napp.listen(port, () => {\n  console.log(`🚀 Fusion Starter server running on port ${port}`);\n  console.log(`📱 Frontend: http://localhost:${port}`);\n  console.log(`🔧 API: http://localhost:${port}/api`);\n});\n\n// Graceful shutdown\nprocess.on(\"SIGTERM\", () => {\n  console.log(\"🛑 Received SIGTERM, shutting down gracefully\");\n  process.exit(0);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"🛑 Received SIGINT, shutting down gracefully\");\n  process.exit(0);\n});\n"],"names":["addressSchema","JWT_SECRET","GoogleStrategy","User","JwtStrategy","router","productSchema","categorySchema","createSlug","express","cloudinary","storage","upload","result","Order","Review","Product","ShiprocketOrder","app","path","authRoutes","productRoutes","categoryRoutes","cartRoutes","wishlistRoutes","uploadRoutes","orderRoutes","checkoutRoutes","reviewRoutes","searchRoutes","addressRoutes","settingsRoutes","analyticsRoutes","usersRoutes","inventoryRoutes","shiprocketRoutes"],"mappings":"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"}